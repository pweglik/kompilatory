Grammar:

Rule 0     S' -> Program
Rule 1     Program -> StatementList
Rule 2     empty -> <empty>
Rule 3     StatementList -> empty
Rule 4     StatementList -> StatementList Statement
Rule 5     Statement -> ExpressionStatement ;
Rule 6     Statement -> AssignmentStatement ;
Rule 7     Statement -> PrintStatement ;
Rule 8     Statement -> JumpStatement ;
Rule 9     Statement -> IterationStatement
Rule 10    Statement -> SelectionStatement
Rule 11    Statement -> CompoundStatement
Rule 12    CompoundStatement -> { StatementList }
Rule 13    ExpressionStatement -> Expression
Rule 14    SelectionStatement -> IF ( Expression ) Statement ELSE Statement
Rule 15    SelectionStatement -> IF ( Expression ) Statement
Rule 16    IterationStatement -> FOR ID ASS List Statement
Rule 17    IterationStatement -> FOR ID ASS Range Statement
Rule 18    IterationStatement -> WHILE ( Expression ) Statement
Rule 19    JumpStatement -> RETURN Expression
Rule 20    JumpStatement -> CONTINUE
Rule 21    JumpStatement -> BREAK
Rule 22    PrintStatement -> PRINT Expression
Rule 23    Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
Rule 24    PreExpressionPost -> ID
Rule 25    PreExpressionPost -> Primitive
Rule 26    PreExpressionPost -> Matrix
Rule 27    PreExpressionPost -> Expression BinaryOperator Expression
Rule 28    PreExpressionPost -> Expression ComparisonOperator Expression
Rule 29    MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ]
Rule 30    MatrixAccess -> empty
Rule 31    MatrixAccessRange -> MatrixAccessRangeElement
Rule 32    MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement
Rule 33    MatrixAccessRangeElement -> ID
Rule 34    MatrixAccessRangeElement -> INT
Rule 35    Range -> RangeElement : RangeElement : RangeElement
Rule 36    Range -> RangeElement : RangeElement
Rule 37    RangeElement -> ID
Rule 38    RangeElement -> Number
Rule 39    List -> [ ListContent ]
Rule 40    ListContent -> empty
Rule 41    ListContent -> ListEl , ListContent
Rule 42    ListEl -> List
Rule 43    ListEl -> Primitive
Rule 44    ListEl -> ID
Rule 45    Primitive -> STRING
Rule 46    Primitive -> Number
Rule 47    Matrix -> [ MatrixRowList ]
Rule 48    Matrix -> EYE ( INT )
Rule 49    Matrix -> ONES ( INT )
Rule 50    Matrix -> ZEROS ( INT )
Rule 51    MatrixRowList -> empty
Rule 52    MatrixRowList -> [ MatrixRow ] , MatrixRowList
Rule 53    MatrixRow -> empty
Rule 54    MatrixRow -> Number , MatrixRow
Rule 55    BinaryOperator -> DIV_EL
Rule 56    BinaryOperator -> MUL_EL
Rule 57    BinaryOperator -> SUB_EL
Rule 58    BinaryOperator -> ADD_EL
Rule 59    BinaryOperator -> DIV
Rule 60    BinaryOperator -> MUL
Rule 61    BinaryOperator -> SUB
Rule 62    BinaryOperator -> ADD
Rule 63    AssignmentStatement -> ID MatrixAccess AssignmentOperator Expression
Rule 64    AssignmentStatement -> ID AssignmentOperator Expression
Rule 65    AssignmentOperator -> ASS_MUL
Rule 66    AssignmentOperator -> ASS_DIV
Rule 67    AssignmentOperator -> ASS_SUB
Rule 68    AssignmentOperator -> ASS_ADD
Rule 69    AssignmentOperator -> ASS
Rule 70    PrefixUnaryOperator -> empty
Rule 71    PrefixUnaryOperator -> SUB
Rule 72    PostfixUnaryOperator -> empty
Rule 73    PostfixUnaryOperator -> MAT_TRANS
Rule 74    Number -> FLOAT
Rule 75    Number -> INT
Rule 76    ComparisonOperator -> LESS
Rule 77    ComparisonOperator -> GREATER
Rule 78    ComparisonOperator -> NOT_EQ
Rule 79    ComparisonOperator -> GREATER_EQ
Rule 80    ComparisonOperator -> LESS_EQ
Rule 81    ComparisonOperator -> EQ

Terminals, with rules where they appear:

(                    : 14 15 18 48 49 50
)                    : 14 15 18 48 49 50
,                    : 29 41 52 54
:                    : 32 35 35 36
;                    : 5 6 7 8
ADD                  : 62
ADD_EL               : 58
ASS                  : 16 17 69
ASS_ADD              : 68
ASS_DIV              : 66
ASS_MUL              : 65
ASS_SUB              : 67
BREAK                : 21
CONTINUE             : 20
DIV                  : 59
DIV_EL               : 55
ELSE                 : 14
EQ                   : 81
EYE                  : 48
FLOAT                : 74
FOR                  : 16 17
GREATER              : 77
GREATER_EQ           : 79
ID                   : 16 17 24 33 37 44 63 64
IF                   : 14 15
INT                  : 34 48 49 50 75
LESS                 : 76
LESS_EQ              : 80
MAT_TRANS            : 73
MUL                  : 60
MUL_EL               : 56
NOT_EQ               : 78
ONES                 : 49
PRINT                : 22
RETURN               : 19
STRING               : 45
SUB                  : 61 71
SUB_EL               : 57
WHILE                : 18
ZEROS                : 50
[                    : 29 39 47 52
]                    : 29 39 47 52
error                : 
{                    : 12
}                    : 12

Nonterminals, with rules where they appear:

AssignmentOperator   : 63 64
AssignmentStatement  : 6
BinaryOperator       : 27
ComparisonOperator   : 28
CompoundStatement    : 11
Expression           : 13 14 15 18 19 22 27 27 28 28 63 64
ExpressionStatement  : 5
IterationStatement   : 9
JumpStatement        : 8
List                 : 16 42
ListContent          : 39 41
ListEl               : 41
Matrix               : 26
MatrixAccess         : 63
MatrixAccessRange    : 29 29
MatrixAccessRangeElement : 31 32 32
MatrixRow            : 52 54
MatrixRowList        : 47 52
Number               : 38 46 54
PostfixUnaryOperator : 23
PreExpressionPost    : 23
PrefixUnaryOperator  : 23
Primitive            : 25 43
PrintStatement       : 7
Program              : 0
Range                : 17
RangeElement         : 35 35 35 36 36
SelectionStatement   : 10
Statement            : 4 14 14 15 16 17 18
StatementList        : 1 4 12
empty                : 3 30 40 51 53 70 72


state 0

    (0) S' -> . Program
    (1) Program -> . StatementList
    (3) StatementList -> . empty
    (4) StatementList -> . StatementList Statement
    (2) empty -> .
    ID              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    CONTINUE        reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    Program                        shift and go to state 1
    StatementList                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> Program .


state 2

    (1) Program -> StatementList .
    (4) StatementList -> StatementList . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    $end            reduce using rule 1 (Program -> StatementList .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 4
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 3

    (3) StatementList -> empty .
    ID              reduce using rule 3 (StatementList -> empty .)
    PRINT           reduce using rule 3 (StatementList -> empty .)
    RETURN          reduce using rule 3 (StatementList -> empty .)
    CONTINUE        reduce using rule 3 (StatementList -> empty .)
    BREAK           reduce using rule 3 (StatementList -> empty .)
    FOR             reduce using rule 3 (StatementList -> empty .)
    WHILE           reduce using rule 3 (StatementList -> empty .)
    IF              reduce using rule 3 (StatementList -> empty .)
    {               reduce using rule 3 (StatementList -> empty .)
    SUB             reduce using rule 3 (StatementList -> empty .)
    STRING          reduce using rule 3 (StatementList -> empty .)
    [               reduce using rule 3 (StatementList -> empty .)
    EYE             reduce using rule 3 (StatementList -> empty .)
    ONES            reduce using rule 3 (StatementList -> empty .)
    ZEROS           reduce using rule 3 (StatementList -> empty .)
    FLOAT           reduce using rule 3 (StatementList -> empty .)
    INT             reduce using rule 3 (StatementList -> empty .)
    $end            reduce using rule 3 (StatementList -> empty .)
    }               reduce using rule 3 (StatementList -> empty .)


state 4

    (4) StatementList -> StatementList Statement .
    ID              reduce using rule 4 (StatementList -> StatementList Statement .)
    PRINT           reduce using rule 4 (StatementList -> StatementList Statement .)
    RETURN          reduce using rule 4 (StatementList -> StatementList Statement .)
    CONTINUE        reduce using rule 4 (StatementList -> StatementList Statement .)
    BREAK           reduce using rule 4 (StatementList -> StatementList Statement .)
    FOR             reduce using rule 4 (StatementList -> StatementList Statement .)
    WHILE           reduce using rule 4 (StatementList -> StatementList Statement .)
    IF              reduce using rule 4 (StatementList -> StatementList Statement .)
    {               reduce using rule 4 (StatementList -> StatementList Statement .)
    SUB             reduce using rule 4 (StatementList -> StatementList Statement .)
    STRING          reduce using rule 4 (StatementList -> StatementList Statement .)
    [               reduce using rule 4 (StatementList -> StatementList Statement .)
    EYE             reduce using rule 4 (StatementList -> StatementList Statement .)
    ONES            reduce using rule 4 (StatementList -> StatementList Statement .)
    ZEROS           reduce using rule 4 (StatementList -> StatementList Statement .)
    FLOAT           reduce using rule 4 (StatementList -> StatementList Statement .)
    INT             reduce using rule 4 (StatementList -> StatementList Statement .)
    $end            reduce using rule 4 (StatementList -> StatementList Statement .)
    }               reduce using rule 4 (StatementList -> StatementList Statement .)


state 5

    (5) Statement -> ExpressionStatement . ;
    ;               shift and go to state 25


state 6

    (6) Statement -> AssignmentStatement . ;
    ;               shift and go to state 26


state 7

    (7) Statement -> PrintStatement . ;
    ;               shift and go to state 27


state 8

    (8) Statement -> JumpStatement . ;
    ;               shift and go to state 28


state 9

    (9) Statement -> IterationStatement .
    ID              reduce using rule 9 (Statement -> IterationStatement .)
    PRINT           reduce using rule 9 (Statement -> IterationStatement .)
    RETURN          reduce using rule 9 (Statement -> IterationStatement .)
    CONTINUE        reduce using rule 9 (Statement -> IterationStatement .)
    BREAK           reduce using rule 9 (Statement -> IterationStatement .)
    FOR             reduce using rule 9 (Statement -> IterationStatement .)
    WHILE           reduce using rule 9 (Statement -> IterationStatement .)
    IF              reduce using rule 9 (Statement -> IterationStatement .)
    {               reduce using rule 9 (Statement -> IterationStatement .)
    SUB             reduce using rule 9 (Statement -> IterationStatement .)
    STRING          reduce using rule 9 (Statement -> IterationStatement .)
    [               reduce using rule 9 (Statement -> IterationStatement .)
    EYE             reduce using rule 9 (Statement -> IterationStatement .)
    ONES            reduce using rule 9 (Statement -> IterationStatement .)
    ZEROS           reduce using rule 9 (Statement -> IterationStatement .)
    FLOAT           reduce using rule 9 (Statement -> IterationStatement .)
    INT             reduce using rule 9 (Statement -> IterationStatement .)
    $end            reduce using rule 9 (Statement -> IterationStatement .)
    }               reduce using rule 9 (Statement -> IterationStatement .)
    ELSE            reduce using rule 9 (Statement -> IterationStatement .)


state 10

    (10) Statement -> SelectionStatement .
    ID              reduce using rule 10 (Statement -> SelectionStatement .)
    PRINT           reduce using rule 10 (Statement -> SelectionStatement .)
    RETURN          reduce using rule 10 (Statement -> SelectionStatement .)
    CONTINUE        reduce using rule 10 (Statement -> SelectionStatement .)
    BREAK           reduce using rule 10 (Statement -> SelectionStatement .)
    FOR             reduce using rule 10 (Statement -> SelectionStatement .)
    WHILE           reduce using rule 10 (Statement -> SelectionStatement .)
    IF              reduce using rule 10 (Statement -> SelectionStatement .)
    {               reduce using rule 10 (Statement -> SelectionStatement .)
    SUB             reduce using rule 10 (Statement -> SelectionStatement .)
    STRING          reduce using rule 10 (Statement -> SelectionStatement .)
    [               reduce using rule 10 (Statement -> SelectionStatement .)
    EYE             reduce using rule 10 (Statement -> SelectionStatement .)
    ONES            reduce using rule 10 (Statement -> SelectionStatement .)
    ZEROS           reduce using rule 10 (Statement -> SelectionStatement .)
    FLOAT           reduce using rule 10 (Statement -> SelectionStatement .)
    INT             reduce using rule 10 (Statement -> SelectionStatement .)
    $end            reduce using rule 10 (Statement -> SelectionStatement .)
    }               reduce using rule 10 (Statement -> SelectionStatement .)
    ELSE            reduce using rule 10 (Statement -> SelectionStatement .)


state 11

    (11) Statement -> CompoundStatement .
    ID              reduce using rule 11 (Statement -> CompoundStatement .)
    PRINT           reduce using rule 11 (Statement -> CompoundStatement .)
    RETURN          reduce using rule 11 (Statement -> CompoundStatement .)
    CONTINUE        reduce using rule 11 (Statement -> CompoundStatement .)
    BREAK           reduce using rule 11 (Statement -> CompoundStatement .)
    FOR             reduce using rule 11 (Statement -> CompoundStatement .)
    WHILE           reduce using rule 11 (Statement -> CompoundStatement .)
    IF              reduce using rule 11 (Statement -> CompoundStatement .)
    {               reduce using rule 11 (Statement -> CompoundStatement .)
    SUB             reduce using rule 11 (Statement -> CompoundStatement .)
    STRING          reduce using rule 11 (Statement -> CompoundStatement .)
    [               reduce using rule 11 (Statement -> CompoundStatement .)
    EYE             reduce using rule 11 (Statement -> CompoundStatement .)
    ONES            reduce using rule 11 (Statement -> CompoundStatement .)
    ZEROS           reduce using rule 11 (Statement -> CompoundStatement .)
    FLOAT           reduce using rule 11 (Statement -> CompoundStatement .)
    INT             reduce using rule 11 (Statement -> CompoundStatement .)
    $end            reduce using rule 11 (Statement -> CompoundStatement .)
    }               reduce using rule 11 (Statement -> CompoundStatement .)
    ELSE            reduce using rule 11 (Statement -> CompoundStatement .)


state 12

    (13) ExpressionStatement -> Expression .
    ;               reduce using rule 13 (ExpressionStatement -> Expression .)


state 13

    (63) AssignmentStatement -> ID . MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> ID . AssignmentOperator Expression
    (29) MatrixAccess -> . [ MatrixAccessRange , MatrixAccessRange ]
    (30) MatrixAccess -> . empty
    (65) AssignmentOperator -> . ASS_MUL
    (66) AssignmentOperator -> . ASS_DIV
    (67) AssignmentOperator -> . ASS_SUB
    (68) AssignmentOperator -> . ASS_ADD
    (69) AssignmentOperator -> . ASS
    (2) empty -> .
  ! shift/reduce conflict for ASS_MUL resolved as shift
  ! shift/reduce conflict for ASS_DIV resolved as shift
  ! shift/reduce conflict for ASS_SUB resolved as shift
  ! shift/reduce conflict for ASS_ADD resolved as shift
  ! shift/reduce conflict for ASS resolved as shift
    [               shift and go to state 31
    ASS_MUL         shift and go to state 33
    ASS_DIV         shift and go to state 34
    ASS_SUB         shift and go to state 35
    ASS_ADD         shift and go to state 36
    ASS             shift and go to state 37

    MatrixAccess                   shift and go to state 29
    AssignmentOperator             shift and go to state 30
    empty                          shift and go to state 32

state 14

    (22) PrintStatement -> PRINT . Expression
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 38
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 15

    (19) JumpStatement -> RETURN . Expression
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 39
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 16

    (20) JumpStatement -> CONTINUE .
    ;               reduce using rule 20 (JumpStatement -> CONTINUE .)


state 17

    (21) JumpStatement -> BREAK .
    ;               reduce using rule 21 (JumpStatement -> BREAK .)


state 18

    (16) IterationStatement -> FOR . ID ASS List Statement
    (17) IterationStatement -> FOR . ID ASS Range Statement
    ID              shift and go to state 40


state 19

    (18) IterationStatement -> WHILE . ( Expression ) Statement
    (               shift and go to state 41


state 20

    (14) SelectionStatement -> IF . ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> IF . ( Expression ) Statement
    (               shift and go to state 42


state 21

    (12) CompoundStatement -> { . StatementList }
    (3) StatementList -> . empty
    (4) StatementList -> . StatementList Statement
    (2) empty -> .
    }               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    CONTINUE        reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    StatementList                  shift and go to state 43
    empty                          shift and go to state 3

state 22

    (23) Expression -> PrefixUnaryOperator . PreExpressionPost PostfixUnaryOperator
    (24) PreExpressionPost -> . ID
    (25) PreExpressionPost -> . Primitive
    (26) PreExpressionPost -> . Matrix
    (27) PreExpressionPost -> . Expression BinaryOperator Expression
    (28) PreExpressionPost -> . Expression ComparisonOperator Expression
    (45) Primitive -> . STRING
    (46) Primitive -> . Number
    (47) Matrix -> . [ MatrixRowList ]
    (48) Matrix -> . EYE ( INT )
    (49) Matrix -> . ONES ( INT )
    (50) Matrix -> . ZEROS ( INT )
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (74) Number -> . FLOAT
    (75) Number -> . INT
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for EYE resolved as shift
  ! shift/reduce conflict for ONES resolved as shift
  ! shift/reduce conflict for ZEROS resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              shift and go to state 45
    STRING          shift and go to state 49
    [               shift and go to state 51
    EYE             shift and go to state 52
    ONES            shift and go to state 54
    ZEROS           shift and go to state 55
    FLOAT           shift and go to state 56
    INT             shift and go to state 53
    SUB             shift and go to state 24

    PrefixUnaryOperator            shift and go to state 22
    PreExpressionPost              shift and go to state 44
    Primitive                      shift and go to state 46
    Matrix                         shift and go to state 47
    Expression                     shift and go to state 48
    Number                         shift and go to state 50
    empty                          shift and go to state 23

state 23

    (70) PrefixUnaryOperator -> empty .
    ID              reduce using rule 70 (PrefixUnaryOperator -> empty .)
    STRING          reduce using rule 70 (PrefixUnaryOperator -> empty .)
    [               reduce using rule 70 (PrefixUnaryOperator -> empty .)
    EYE             reduce using rule 70 (PrefixUnaryOperator -> empty .)
    ONES            reduce using rule 70 (PrefixUnaryOperator -> empty .)
    ZEROS           reduce using rule 70 (PrefixUnaryOperator -> empty .)
    FLOAT           reduce using rule 70 (PrefixUnaryOperator -> empty .)
    INT             reduce using rule 70 (PrefixUnaryOperator -> empty .)
    SUB             reduce using rule 70 (PrefixUnaryOperator -> empty .)


state 24

    (71) PrefixUnaryOperator -> SUB .
    ID              reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    STRING          reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    [               reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    EYE             reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    ONES            reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    ZEROS           reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    FLOAT           reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    INT             reduce using rule 71 (PrefixUnaryOperator -> SUB .)
    SUB             reduce using rule 71 (PrefixUnaryOperator -> SUB .)


state 25

    (5) Statement -> ExpressionStatement ; .
    ID              reduce using rule 5 (Statement -> ExpressionStatement ; .)
    PRINT           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    RETURN          reduce using rule 5 (Statement -> ExpressionStatement ; .)
    CONTINUE        reduce using rule 5 (Statement -> ExpressionStatement ; .)
    BREAK           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    FOR             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    WHILE           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    IF              reduce using rule 5 (Statement -> ExpressionStatement ; .)
    {               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    SUB             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    STRING          reduce using rule 5 (Statement -> ExpressionStatement ; .)
    [               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    EYE             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    ONES            reduce using rule 5 (Statement -> ExpressionStatement ; .)
    ZEROS           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    FLOAT           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    INT             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    $end            reduce using rule 5 (Statement -> ExpressionStatement ; .)
    }               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    ELSE            reduce using rule 5 (Statement -> ExpressionStatement ; .)


state 26

    (6) Statement -> AssignmentStatement ; .
    ID              reduce using rule 6 (Statement -> AssignmentStatement ; .)
    PRINT           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    RETURN          reduce using rule 6 (Statement -> AssignmentStatement ; .)
    CONTINUE        reduce using rule 6 (Statement -> AssignmentStatement ; .)
    BREAK           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    FOR             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    WHILE           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    IF              reduce using rule 6 (Statement -> AssignmentStatement ; .)
    {               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    SUB             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    STRING          reduce using rule 6 (Statement -> AssignmentStatement ; .)
    [               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    EYE             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    ONES            reduce using rule 6 (Statement -> AssignmentStatement ; .)
    ZEROS           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    FLOAT           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    INT             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    $end            reduce using rule 6 (Statement -> AssignmentStatement ; .)
    }               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    ELSE            reduce using rule 6 (Statement -> AssignmentStatement ; .)


state 27

    (7) Statement -> PrintStatement ; .
    ID              reduce using rule 7 (Statement -> PrintStatement ; .)
    PRINT           reduce using rule 7 (Statement -> PrintStatement ; .)
    RETURN          reduce using rule 7 (Statement -> PrintStatement ; .)
    CONTINUE        reduce using rule 7 (Statement -> PrintStatement ; .)
    BREAK           reduce using rule 7 (Statement -> PrintStatement ; .)
    FOR             reduce using rule 7 (Statement -> PrintStatement ; .)
    WHILE           reduce using rule 7 (Statement -> PrintStatement ; .)
    IF              reduce using rule 7 (Statement -> PrintStatement ; .)
    {               reduce using rule 7 (Statement -> PrintStatement ; .)
    SUB             reduce using rule 7 (Statement -> PrintStatement ; .)
    STRING          reduce using rule 7 (Statement -> PrintStatement ; .)
    [               reduce using rule 7 (Statement -> PrintStatement ; .)
    EYE             reduce using rule 7 (Statement -> PrintStatement ; .)
    ONES            reduce using rule 7 (Statement -> PrintStatement ; .)
    ZEROS           reduce using rule 7 (Statement -> PrintStatement ; .)
    FLOAT           reduce using rule 7 (Statement -> PrintStatement ; .)
    INT             reduce using rule 7 (Statement -> PrintStatement ; .)
    $end            reduce using rule 7 (Statement -> PrintStatement ; .)
    }               reduce using rule 7 (Statement -> PrintStatement ; .)
    ELSE            reduce using rule 7 (Statement -> PrintStatement ; .)


state 28

    (8) Statement -> JumpStatement ; .
    ID              reduce using rule 8 (Statement -> JumpStatement ; .)
    PRINT           reduce using rule 8 (Statement -> JumpStatement ; .)
    RETURN          reduce using rule 8 (Statement -> JumpStatement ; .)
    CONTINUE        reduce using rule 8 (Statement -> JumpStatement ; .)
    BREAK           reduce using rule 8 (Statement -> JumpStatement ; .)
    FOR             reduce using rule 8 (Statement -> JumpStatement ; .)
    WHILE           reduce using rule 8 (Statement -> JumpStatement ; .)
    IF              reduce using rule 8 (Statement -> JumpStatement ; .)
    {               reduce using rule 8 (Statement -> JumpStatement ; .)
    SUB             reduce using rule 8 (Statement -> JumpStatement ; .)
    STRING          reduce using rule 8 (Statement -> JumpStatement ; .)
    [               reduce using rule 8 (Statement -> JumpStatement ; .)
    EYE             reduce using rule 8 (Statement -> JumpStatement ; .)
    ONES            reduce using rule 8 (Statement -> JumpStatement ; .)
    ZEROS           reduce using rule 8 (Statement -> JumpStatement ; .)
    FLOAT           reduce using rule 8 (Statement -> JumpStatement ; .)
    INT             reduce using rule 8 (Statement -> JumpStatement ; .)
    $end            reduce using rule 8 (Statement -> JumpStatement ; .)
    }               reduce using rule 8 (Statement -> JumpStatement ; .)
    ELSE            reduce using rule 8 (Statement -> JumpStatement ; .)


state 29

    (63) AssignmentStatement -> ID MatrixAccess . AssignmentOperator Expression
    (65) AssignmentOperator -> . ASS_MUL
    (66) AssignmentOperator -> . ASS_DIV
    (67) AssignmentOperator -> . ASS_SUB
    (68) AssignmentOperator -> . ASS_ADD
    (69) AssignmentOperator -> . ASS
    ASS_MUL         shift and go to state 33
    ASS_DIV         shift and go to state 34
    ASS_SUB         shift and go to state 35
    ASS_ADD         shift and go to state 36
    ASS             shift and go to state 37

    AssignmentOperator             shift and go to state 57

state 30

    (64) AssignmentStatement -> ID AssignmentOperator . Expression
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 58
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 31

    (29) MatrixAccess -> [ . MatrixAccessRange , MatrixAccessRange ]
    (31) MatrixAccessRange -> . MatrixAccessRangeElement
    (32) MatrixAccessRange -> . MatrixAccessRangeElement : MatrixAccessRangeElement
    (33) MatrixAccessRangeElement -> . ID
    (34) MatrixAccessRangeElement -> . INT
    ID              shift and go to state 61
    INT             shift and go to state 62

    MatrixAccessRange              shift and go to state 59
    MatrixAccessRangeElement       shift and go to state 60

state 32

    (30) MatrixAccess -> empty .
    ASS_MUL         reduce using rule 30 (MatrixAccess -> empty .)
    ASS_DIV         reduce using rule 30 (MatrixAccess -> empty .)
    ASS_SUB         reduce using rule 30 (MatrixAccess -> empty .)
    ASS_ADD         reduce using rule 30 (MatrixAccess -> empty .)
    ASS             reduce using rule 30 (MatrixAccess -> empty .)


state 33

    (65) AssignmentOperator -> ASS_MUL .
    SUB             reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    ID              reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    STRING          reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    [               reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    EYE             reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    ONES            reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    ZEROS           reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 65 (AssignmentOperator -> ASS_MUL .)
    INT             reduce using rule 65 (AssignmentOperator -> ASS_MUL .)


state 34

    (66) AssignmentOperator -> ASS_DIV .
    SUB             reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    ID              reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    STRING          reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    [               reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    EYE             reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    ONES            reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    ZEROS           reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    FLOAT           reduce using rule 66 (AssignmentOperator -> ASS_DIV .)
    INT             reduce using rule 66 (AssignmentOperator -> ASS_DIV .)


state 35

    (67) AssignmentOperator -> ASS_SUB .
    SUB             reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    ID              reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    STRING          reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    [               reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    EYE             reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    ONES            reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    ZEROS           reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 67 (AssignmentOperator -> ASS_SUB .)
    INT             reduce using rule 67 (AssignmentOperator -> ASS_SUB .)


state 36

    (68) AssignmentOperator -> ASS_ADD .
    SUB             reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    ID              reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    STRING          reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    [               reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    EYE             reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    ONES            reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    ZEROS           reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 68 (AssignmentOperator -> ASS_ADD .)
    INT             reduce using rule 68 (AssignmentOperator -> ASS_ADD .)


state 37

    (69) AssignmentOperator -> ASS .
    SUB             reduce using rule 69 (AssignmentOperator -> ASS .)
    ID              reduce using rule 69 (AssignmentOperator -> ASS .)
    STRING          reduce using rule 69 (AssignmentOperator -> ASS .)
    [               reduce using rule 69 (AssignmentOperator -> ASS .)
    EYE             reduce using rule 69 (AssignmentOperator -> ASS .)
    ONES            reduce using rule 69 (AssignmentOperator -> ASS .)
    ZEROS           reduce using rule 69 (AssignmentOperator -> ASS .)
    FLOAT           reduce using rule 69 (AssignmentOperator -> ASS .)
    INT             reduce using rule 69 (AssignmentOperator -> ASS .)


state 38

    (22) PrintStatement -> PRINT Expression .
    ;               reduce using rule 22 (PrintStatement -> PRINT Expression .)


state 39

    (19) JumpStatement -> RETURN Expression .
    ;               reduce using rule 19 (JumpStatement -> RETURN Expression .)


state 40

    (16) IterationStatement -> FOR ID . ASS List Statement
    (17) IterationStatement -> FOR ID . ASS Range Statement
    ASS             shift and go to state 63


state 41

    (18) IterationStatement -> WHILE ( . Expression ) Statement
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 64
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 42

    (14) SelectionStatement -> IF ( . Expression ) Statement ELSE Statement
    (15) SelectionStatement -> IF ( . Expression ) Statement
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 65
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 43

    (12) CompoundStatement -> { StatementList . }
    (4) StatementList -> StatementList . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    }               shift and go to state 66
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 4
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 44

    (23) Expression -> PrefixUnaryOperator PreExpressionPost . PostfixUnaryOperator
    (72) PostfixUnaryOperator -> . empty
    (73) PostfixUnaryOperator -> . MAT_TRANS
    (2) empty -> .
  ! shift/reduce conflict for MAT_TRANS resolved as shift
    MAT_TRANS       shift and go to state 69
    ;               reduce using rule 2 (empty -> .)
    DIV_EL          reduce using rule 2 (empty -> .)
    MUL_EL          reduce using rule 2 (empty -> .)
    SUB_EL          reduce using rule 2 (empty -> .)
    ADD_EL          reduce using rule 2 (empty -> .)
    DIV             reduce using rule 2 (empty -> .)
    MUL             reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    ADD             reduce using rule 2 (empty -> .)
    LESS            reduce using rule 2 (empty -> .)
    GREATER         reduce using rule 2 (empty -> .)
    NOT_EQ          reduce using rule 2 (empty -> .)
    GREATER_EQ      reduce using rule 2 (empty -> .)
    LESS_EQ         reduce using rule 2 (empty -> .)
    EQ              reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)

    PostfixUnaryOperator           shift and go to state 67
    empty                          shift and go to state 68

state 45

    (24) PreExpressionPost -> ID .
    MAT_TRANS       reduce using rule 24 (PreExpressionPost -> ID .)
    ;               reduce using rule 24 (PreExpressionPost -> ID .)
    DIV_EL          reduce using rule 24 (PreExpressionPost -> ID .)
    MUL_EL          reduce using rule 24 (PreExpressionPost -> ID .)
    SUB_EL          reduce using rule 24 (PreExpressionPost -> ID .)
    ADD_EL          reduce using rule 24 (PreExpressionPost -> ID .)
    DIV             reduce using rule 24 (PreExpressionPost -> ID .)
    MUL             reduce using rule 24 (PreExpressionPost -> ID .)
    SUB             reduce using rule 24 (PreExpressionPost -> ID .)
    ADD             reduce using rule 24 (PreExpressionPost -> ID .)
    LESS            reduce using rule 24 (PreExpressionPost -> ID .)
    GREATER         reduce using rule 24 (PreExpressionPost -> ID .)
    NOT_EQ          reduce using rule 24 (PreExpressionPost -> ID .)
    GREATER_EQ      reduce using rule 24 (PreExpressionPost -> ID .)
    LESS_EQ         reduce using rule 24 (PreExpressionPost -> ID .)
    EQ              reduce using rule 24 (PreExpressionPost -> ID .)
    )               reduce using rule 24 (PreExpressionPost -> ID .)


state 46

    (25) PreExpressionPost -> Primitive .
    MAT_TRANS       reduce using rule 25 (PreExpressionPost -> Primitive .)
    ;               reduce using rule 25 (PreExpressionPost -> Primitive .)
    DIV_EL          reduce using rule 25 (PreExpressionPost -> Primitive .)
    MUL_EL          reduce using rule 25 (PreExpressionPost -> Primitive .)
    SUB_EL          reduce using rule 25 (PreExpressionPost -> Primitive .)
    ADD_EL          reduce using rule 25 (PreExpressionPost -> Primitive .)
    DIV             reduce using rule 25 (PreExpressionPost -> Primitive .)
    MUL             reduce using rule 25 (PreExpressionPost -> Primitive .)
    SUB             reduce using rule 25 (PreExpressionPost -> Primitive .)
    ADD             reduce using rule 25 (PreExpressionPost -> Primitive .)
    LESS            reduce using rule 25 (PreExpressionPost -> Primitive .)
    GREATER         reduce using rule 25 (PreExpressionPost -> Primitive .)
    NOT_EQ          reduce using rule 25 (PreExpressionPost -> Primitive .)
    GREATER_EQ      reduce using rule 25 (PreExpressionPost -> Primitive .)
    LESS_EQ         reduce using rule 25 (PreExpressionPost -> Primitive .)
    EQ              reduce using rule 25 (PreExpressionPost -> Primitive .)
    )               reduce using rule 25 (PreExpressionPost -> Primitive .)


state 47

    (26) PreExpressionPost -> Matrix .
    MAT_TRANS       reduce using rule 26 (PreExpressionPost -> Matrix .)
    ;               reduce using rule 26 (PreExpressionPost -> Matrix .)
    DIV_EL          reduce using rule 26 (PreExpressionPost -> Matrix .)
    MUL_EL          reduce using rule 26 (PreExpressionPost -> Matrix .)
    SUB_EL          reduce using rule 26 (PreExpressionPost -> Matrix .)
    ADD_EL          reduce using rule 26 (PreExpressionPost -> Matrix .)
    DIV             reduce using rule 26 (PreExpressionPost -> Matrix .)
    MUL             reduce using rule 26 (PreExpressionPost -> Matrix .)
    SUB             reduce using rule 26 (PreExpressionPost -> Matrix .)
    ADD             reduce using rule 26 (PreExpressionPost -> Matrix .)
    LESS            reduce using rule 26 (PreExpressionPost -> Matrix .)
    GREATER         reduce using rule 26 (PreExpressionPost -> Matrix .)
    NOT_EQ          reduce using rule 26 (PreExpressionPost -> Matrix .)
    GREATER_EQ      reduce using rule 26 (PreExpressionPost -> Matrix .)
    LESS_EQ         reduce using rule 26 (PreExpressionPost -> Matrix .)
    EQ              reduce using rule 26 (PreExpressionPost -> Matrix .)
    )               reduce using rule 26 (PreExpressionPost -> Matrix .)


state 48

    (27) PreExpressionPost -> Expression . BinaryOperator Expression
    (28) PreExpressionPost -> Expression . ComparisonOperator Expression
    (55) BinaryOperator -> . DIV_EL
    (56) BinaryOperator -> . MUL_EL
    (57) BinaryOperator -> . SUB_EL
    (58) BinaryOperator -> . ADD_EL
    (59) BinaryOperator -> . DIV
    (60) BinaryOperator -> . MUL
    (61) BinaryOperator -> . SUB
    (62) BinaryOperator -> . ADD
    (76) ComparisonOperator -> . LESS
    (77) ComparisonOperator -> . GREATER
    (78) ComparisonOperator -> . NOT_EQ
    (79) ComparisonOperator -> . GREATER_EQ
    (80) ComparisonOperator -> . LESS_EQ
    (81) ComparisonOperator -> . EQ
    DIV_EL          shift and go to state 72
    MUL_EL          shift and go to state 73
    SUB_EL          shift and go to state 74
    ADD_EL          shift and go to state 75
    DIV             shift and go to state 76
    MUL             shift and go to state 77
    SUB             shift and go to state 78
    ADD             shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    NOT_EQ          shift and go to state 82
    GREATER_EQ      shift and go to state 83
    LESS_EQ         shift and go to state 84
    EQ              shift and go to state 85

    BinaryOperator                 shift and go to state 70
    ComparisonOperator             shift and go to state 71

state 49

    (45) Primitive -> STRING .
    MAT_TRANS       reduce using rule 45 (Primitive -> STRING .)
    ;               reduce using rule 45 (Primitive -> STRING .)
    DIV_EL          reduce using rule 45 (Primitive -> STRING .)
    MUL_EL          reduce using rule 45 (Primitive -> STRING .)
    SUB_EL          reduce using rule 45 (Primitive -> STRING .)
    ADD_EL          reduce using rule 45 (Primitive -> STRING .)
    DIV             reduce using rule 45 (Primitive -> STRING .)
    MUL             reduce using rule 45 (Primitive -> STRING .)
    SUB             reduce using rule 45 (Primitive -> STRING .)
    ADD             reduce using rule 45 (Primitive -> STRING .)
    LESS            reduce using rule 45 (Primitive -> STRING .)
    GREATER         reduce using rule 45 (Primitive -> STRING .)
    NOT_EQ          reduce using rule 45 (Primitive -> STRING .)
    GREATER_EQ      reduce using rule 45 (Primitive -> STRING .)
    LESS_EQ         reduce using rule 45 (Primitive -> STRING .)
    EQ              reduce using rule 45 (Primitive -> STRING .)
    )               reduce using rule 45 (Primitive -> STRING .)
    ,               reduce using rule 45 (Primitive -> STRING .)


state 50

    (46) Primitive -> Number .
    MAT_TRANS       reduce using rule 46 (Primitive -> Number .)
    ;               reduce using rule 46 (Primitive -> Number .)
    DIV_EL          reduce using rule 46 (Primitive -> Number .)
    MUL_EL          reduce using rule 46 (Primitive -> Number .)
    SUB_EL          reduce using rule 46 (Primitive -> Number .)
    ADD_EL          reduce using rule 46 (Primitive -> Number .)
    DIV             reduce using rule 46 (Primitive -> Number .)
    MUL             reduce using rule 46 (Primitive -> Number .)
    SUB             reduce using rule 46 (Primitive -> Number .)
    ADD             reduce using rule 46 (Primitive -> Number .)
    LESS            reduce using rule 46 (Primitive -> Number .)
    GREATER         reduce using rule 46 (Primitive -> Number .)
    NOT_EQ          reduce using rule 46 (Primitive -> Number .)
    GREATER_EQ      reduce using rule 46 (Primitive -> Number .)
    LESS_EQ         reduce using rule 46 (Primitive -> Number .)
    EQ              reduce using rule 46 (Primitive -> Number .)
    )               reduce using rule 46 (Primitive -> Number .)
    ,               reduce using rule 46 (Primitive -> Number .)


state 51

    (47) Matrix -> [ . MatrixRowList ]
    (51) MatrixRowList -> . empty
    (52) MatrixRowList -> . [ MatrixRow ] , MatrixRowList
    (2) empty -> .
    [               shift and go to state 86
    ]               reduce using rule 2 (empty -> .)

    MatrixRowList                  shift and go to state 87
    empty                          shift and go to state 88

state 52

    (48) Matrix -> EYE . ( INT )
    (               shift and go to state 89


state 53

    (75) Number -> INT .
    MAT_TRANS       reduce using rule 75 (Number -> INT .)
    ;               reduce using rule 75 (Number -> INT .)
    DIV_EL          reduce using rule 75 (Number -> INT .)
    MUL_EL          reduce using rule 75 (Number -> INT .)
    SUB_EL          reduce using rule 75 (Number -> INT .)
    ADD_EL          reduce using rule 75 (Number -> INT .)
    DIV             reduce using rule 75 (Number -> INT .)
    MUL             reduce using rule 75 (Number -> INT .)
    SUB             reduce using rule 75 (Number -> INT .)
    ADD             reduce using rule 75 (Number -> INT .)
    LESS            reduce using rule 75 (Number -> INT .)
    GREATER         reduce using rule 75 (Number -> INT .)
    NOT_EQ          reduce using rule 75 (Number -> INT .)
    GREATER_EQ      reduce using rule 75 (Number -> INT .)
    LESS_EQ         reduce using rule 75 (Number -> INT .)
    EQ              reduce using rule 75 (Number -> INT .)
    )               reduce using rule 75 (Number -> INT .)
    :               reduce using rule 75 (Number -> INT .)
    ,               reduce using rule 75 (Number -> INT .)
    ID              reduce using rule 75 (Number -> INT .)
    PRINT           reduce using rule 75 (Number -> INT .)
    RETURN          reduce using rule 75 (Number -> INT .)
    CONTINUE        reduce using rule 75 (Number -> INT .)
    BREAK           reduce using rule 75 (Number -> INT .)
    FOR             reduce using rule 75 (Number -> INT .)
    WHILE           reduce using rule 75 (Number -> INT .)
    IF              reduce using rule 75 (Number -> INT .)
    {               reduce using rule 75 (Number -> INT .)
    STRING          reduce using rule 75 (Number -> INT .)
    [               reduce using rule 75 (Number -> INT .)
    EYE             reduce using rule 75 (Number -> INT .)
    ONES            reduce using rule 75 (Number -> INT .)
    ZEROS           reduce using rule 75 (Number -> INT .)
    FLOAT           reduce using rule 75 (Number -> INT .)
    INT             reduce using rule 75 (Number -> INT .)


state 54

    (49) Matrix -> ONES . ( INT )
    (               shift and go to state 90


state 55

    (50) Matrix -> ZEROS . ( INT )
    (               shift and go to state 91


state 56

    (74) Number -> FLOAT .
    MAT_TRANS       reduce using rule 74 (Number -> FLOAT .)
    ;               reduce using rule 74 (Number -> FLOAT .)
    DIV_EL          reduce using rule 74 (Number -> FLOAT .)
    MUL_EL          reduce using rule 74 (Number -> FLOAT .)
    SUB_EL          reduce using rule 74 (Number -> FLOAT .)
    ADD_EL          reduce using rule 74 (Number -> FLOAT .)
    DIV             reduce using rule 74 (Number -> FLOAT .)
    MUL             reduce using rule 74 (Number -> FLOAT .)
    SUB             reduce using rule 74 (Number -> FLOAT .)
    ADD             reduce using rule 74 (Number -> FLOAT .)
    LESS            reduce using rule 74 (Number -> FLOAT .)
    GREATER         reduce using rule 74 (Number -> FLOAT .)
    NOT_EQ          reduce using rule 74 (Number -> FLOAT .)
    GREATER_EQ      reduce using rule 74 (Number -> FLOAT .)
    LESS_EQ         reduce using rule 74 (Number -> FLOAT .)
    EQ              reduce using rule 74 (Number -> FLOAT .)
    )               reduce using rule 74 (Number -> FLOAT .)
    :               reduce using rule 74 (Number -> FLOAT .)
    ,               reduce using rule 74 (Number -> FLOAT .)
    ID              reduce using rule 74 (Number -> FLOAT .)
    PRINT           reduce using rule 74 (Number -> FLOAT .)
    RETURN          reduce using rule 74 (Number -> FLOAT .)
    CONTINUE        reduce using rule 74 (Number -> FLOAT .)
    BREAK           reduce using rule 74 (Number -> FLOAT .)
    FOR             reduce using rule 74 (Number -> FLOAT .)
    WHILE           reduce using rule 74 (Number -> FLOAT .)
    IF              reduce using rule 74 (Number -> FLOAT .)
    {               reduce using rule 74 (Number -> FLOAT .)
    STRING          reduce using rule 74 (Number -> FLOAT .)
    [               reduce using rule 74 (Number -> FLOAT .)
    EYE             reduce using rule 74 (Number -> FLOAT .)
    ONES            reduce using rule 74 (Number -> FLOAT .)
    ZEROS           reduce using rule 74 (Number -> FLOAT .)
    FLOAT           reduce using rule 74 (Number -> FLOAT .)
    INT             reduce using rule 74 (Number -> FLOAT .)


state 57

    (63) AssignmentStatement -> ID MatrixAccess AssignmentOperator . Expression
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 92
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 58

    (64) AssignmentStatement -> ID AssignmentOperator Expression .
    ;               reduce using rule 64 (AssignmentStatement -> ID AssignmentOperator Expression .)


state 59

    (29) MatrixAccess -> [ MatrixAccessRange . , MatrixAccessRange ]
    ,               shift and go to state 93


state 60

    (31) MatrixAccessRange -> MatrixAccessRangeElement .
    (32) MatrixAccessRange -> MatrixAccessRangeElement . : MatrixAccessRangeElement
    ,               reduce using rule 31 (MatrixAccessRange -> MatrixAccessRangeElement .)
    ]               reduce using rule 31 (MatrixAccessRange -> MatrixAccessRangeElement .)
    :               shift and go to state 94


state 61

    (33) MatrixAccessRangeElement -> ID .
    :               reduce using rule 33 (MatrixAccessRangeElement -> ID .)
    ,               reduce using rule 33 (MatrixAccessRangeElement -> ID .)
    ]               reduce using rule 33 (MatrixAccessRangeElement -> ID .)


state 62

    (34) MatrixAccessRangeElement -> INT .
    :               reduce using rule 34 (MatrixAccessRangeElement -> INT .)
    ,               reduce using rule 34 (MatrixAccessRangeElement -> INT .)
    ]               reduce using rule 34 (MatrixAccessRangeElement -> INT .)


state 63

    (16) IterationStatement -> FOR ID ASS . List Statement
    (17) IterationStatement -> FOR ID ASS . Range Statement
    (39) List -> . [ ListContent ]
    (35) Range -> . RangeElement : RangeElement : RangeElement
    (36) Range -> . RangeElement : RangeElement
    (37) RangeElement -> . ID
    (38) RangeElement -> . Number
    (74) Number -> . FLOAT
    (75) Number -> . INT
    [               shift and go to state 98
    ID              shift and go to state 95
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    List                           shift and go to state 96
    Range                          shift and go to state 97
    RangeElement                   shift and go to state 99
    Number                         shift and go to state 100

state 64

    (18) IterationStatement -> WHILE ( Expression . ) Statement
    )               shift and go to state 101


state 65

    (14) SelectionStatement -> IF ( Expression . ) Statement ELSE Statement
    (15) SelectionStatement -> IF ( Expression . ) Statement
    )               shift and go to state 102


state 66

    (12) CompoundStatement -> { StatementList } .
    ID              reduce using rule 12 (CompoundStatement -> { StatementList } .)
    PRINT           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    RETURN          reduce using rule 12 (CompoundStatement -> { StatementList } .)
    CONTINUE        reduce using rule 12 (CompoundStatement -> { StatementList } .)
    BREAK           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    FOR             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    WHILE           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    IF              reduce using rule 12 (CompoundStatement -> { StatementList } .)
    {               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    SUB             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    STRING          reduce using rule 12 (CompoundStatement -> { StatementList } .)
    [               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    EYE             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    ONES            reduce using rule 12 (CompoundStatement -> { StatementList } .)
    ZEROS           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    FLOAT           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    INT             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    $end            reduce using rule 12 (CompoundStatement -> { StatementList } .)
    }               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    ELSE            reduce using rule 12 (CompoundStatement -> { StatementList } .)


state 67

    (23) Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .
    ;               reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    DIV_EL          reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    MUL_EL          reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    SUB_EL          reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    ADD_EL          reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    DIV             reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    MUL             reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    SUB             reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    ADD             reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    LESS            reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    GREATER         reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    NOT_EQ          reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    GREATER_EQ      reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    LESS_EQ         reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    EQ              reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    )               reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)
    MAT_TRANS       reduce using rule 23 (Expression -> PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator .)


state 68

    (72) PostfixUnaryOperator -> empty .
    ;               reduce using rule 72 (PostfixUnaryOperator -> empty .)
    DIV_EL          reduce using rule 72 (PostfixUnaryOperator -> empty .)
    MUL_EL          reduce using rule 72 (PostfixUnaryOperator -> empty .)
    SUB_EL          reduce using rule 72 (PostfixUnaryOperator -> empty .)
    ADD_EL          reduce using rule 72 (PostfixUnaryOperator -> empty .)
    DIV             reduce using rule 72 (PostfixUnaryOperator -> empty .)
    MUL             reduce using rule 72 (PostfixUnaryOperator -> empty .)
    SUB             reduce using rule 72 (PostfixUnaryOperator -> empty .)
    ADD             reduce using rule 72 (PostfixUnaryOperator -> empty .)
    LESS            reduce using rule 72 (PostfixUnaryOperator -> empty .)
    GREATER         reduce using rule 72 (PostfixUnaryOperator -> empty .)
    NOT_EQ          reduce using rule 72 (PostfixUnaryOperator -> empty .)
    GREATER_EQ      reduce using rule 72 (PostfixUnaryOperator -> empty .)
    LESS_EQ         reduce using rule 72 (PostfixUnaryOperator -> empty .)
    EQ              reduce using rule 72 (PostfixUnaryOperator -> empty .)
    )               reduce using rule 72 (PostfixUnaryOperator -> empty .)
    MAT_TRANS       reduce using rule 72 (PostfixUnaryOperator -> empty .)


state 69

    (73) PostfixUnaryOperator -> MAT_TRANS .
    ;               reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    DIV_EL          reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    MUL_EL          reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    SUB_EL          reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    ADD_EL          reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    DIV             reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    MUL             reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    SUB             reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    ADD             reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    LESS            reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    GREATER         reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    NOT_EQ          reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    GREATER_EQ      reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    LESS_EQ         reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    EQ              reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    )               reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)
    MAT_TRANS       reduce using rule 73 (PostfixUnaryOperator -> MAT_TRANS .)


state 70

    (27) PreExpressionPost -> Expression BinaryOperator . Expression
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 103
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 71

    (28) PreExpressionPost -> Expression ComparisonOperator . Expression
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for SUB resolved as shift
    SUB             shift and go to state 24
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 104
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 72

    (55) BinaryOperator -> DIV_EL .
    SUB             reduce using rule 55 (BinaryOperator -> DIV_EL .)
    ID              reduce using rule 55 (BinaryOperator -> DIV_EL .)
    STRING          reduce using rule 55 (BinaryOperator -> DIV_EL .)
    [               reduce using rule 55 (BinaryOperator -> DIV_EL .)
    EYE             reduce using rule 55 (BinaryOperator -> DIV_EL .)
    ONES            reduce using rule 55 (BinaryOperator -> DIV_EL .)
    ZEROS           reduce using rule 55 (BinaryOperator -> DIV_EL .)
    FLOAT           reduce using rule 55 (BinaryOperator -> DIV_EL .)
    INT             reduce using rule 55 (BinaryOperator -> DIV_EL .)


state 73

    (56) BinaryOperator -> MUL_EL .
    SUB             reduce using rule 56 (BinaryOperator -> MUL_EL .)
    ID              reduce using rule 56 (BinaryOperator -> MUL_EL .)
    STRING          reduce using rule 56 (BinaryOperator -> MUL_EL .)
    [               reduce using rule 56 (BinaryOperator -> MUL_EL .)
    EYE             reduce using rule 56 (BinaryOperator -> MUL_EL .)
    ONES            reduce using rule 56 (BinaryOperator -> MUL_EL .)
    ZEROS           reduce using rule 56 (BinaryOperator -> MUL_EL .)
    FLOAT           reduce using rule 56 (BinaryOperator -> MUL_EL .)
    INT             reduce using rule 56 (BinaryOperator -> MUL_EL .)


state 74

    (57) BinaryOperator -> SUB_EL .
    SUB             reduce using rule 57 (BinaryOperator -> SUB_EL .)
    ID              reduce using rule 57 (BinaryOperator -> SUB_EL .)
    STRING          reduce using rule 57 (BinaryOperator -> SUB_EL .)
    [               reduce using rule 57 (BinaryOperator -> SUB_EL .)
    EYE             reduce using rule 57 (BinaryOperator -> SUB_EL .)
    ONES            reduce using rule 57 (BinaryOperator -> SUB_EL .)
    ZEROS           reduce using rule 57 (BinaryOperator -> SUB_EL .)
    FLOAT           reduce using rule 57 (BinaryOperator -> SUB_EL .)
    INT             reduce using rule 57 (BinaryOperator -> SUB_EL .)


state 75

    (58) BinaryOperator -> ADD_EL .
    SUB             reduce using rule 58 (BinaryOperator -> ADD_EL .)
    ID              reduce using rule 58 (BinaryOperator -> ADD_EL .)
    STRING          reduce using rule 58 (BinaryOperator -> ADD_EL .)
    [               reduce using rule 58 (BinaryOperator -> ADD_EL .)
    EYE             reduce using rule 58 (BinaryOperator -> ADD_EL .)
    ONES            reduce using rule 58 (BinaryOperator -> ADD_EL .)
    ZEROS           reduce using rule 58 (BinaryOperator -> ADD_EL .)
    FLOAT           reduce using rule 58 (BinaryOperator -> ADD_EL .)
    INT             reduce using rule 58 (BinaryOperator -> ADD_EL .)


state 76

    (59) BinaryOperator -> DIV .
    SUB             reduce using rule 59 (BinaryOperator -> DIV .)
    ID              reduce using rule 59 (BinaryOperator -> DIV .)
    STRING          reduce using rule 59 (BinaryOperator -> DIV .)
    [               reduce using rule 59 (BinaryOperator -> DIV .)
    EYE             reduce using rule 59 (BinaryOperator -> DIV .)
    ONES            reduce using rule 59 (BinaryOperator -> DIV .)
    ZEROS           reduce using rule 59 (BinaryOperator -> DIV .)
    FLOAT           reduce using rule 59 (BinaryOperator -> DIV .)
    INT             reduce using rule 59 (BinaryOperator -> DIV .)


state 77

    (60) BinaryOperator -> MUL .
    SUB             reduce using rule 60 (BinaryOperator -> MUL .)
    ID              reduce using rule 60 (BinaryOperator -> MUL .)
    STRING          reduce using rule 60 (BinaryOperator -> MUL .)
    [               reduce using rule 60 (BinaryOperator -> MUL .)
    EYE             reduce using rule 60 (BinaryOperator -> MUL .)
    ONES            reduce using rule 60 (BinaryOperator -> MUL .)
    ZEROS           reduce using rule 60 (BinaryOperator -> MUL .)
    FLOAT           reduce using rule 60 (BinaryOperator -> MUL .)
    INT             reduce using rule 60 (BinaryOperator -> MUL .)


state 78

    (61) BinaryOperator -> SUB .
    SUB             reduce using rule 61 (BinaryOperator -> SUB .)
    ID              reduce using rule 61 (BinaryOperator -> SUB .)
    STRING          reduce using rule 61 (BinaryOperator -> SUB .)
    [               reduce using rule 61 (BinaryOperator -> SUB .)
    EYE             reduce using rule 61 (BinaryOperator -> SUB .)
    ONES            reduce using rule 61 (BinaryOperator -> SUB .)
    ZEROS           reduce using rule 61 (BinaryOperator -> SUB .)
    FLOAT           reduce using rule 61 (BinaryOperator -> SUB .)
    INT             reduce using rule 61 (BinaryOperator -> SUB .)


state 79

    (62) BinaryOperator -> ADD .
    SUB             reduce using rule 62 (BinaryOperator -> ADD .)
    ID              reduce using rule 62 (BinaryOperator -> ADD .)
    STRING          reduce using rule 62 (BinaryOperator -> ADD .)
    [               reduce using rule 62 (BinaryOperator -> ADD .)
    EYE             reduce using rule 62 (BinaryOperator -> ADD .)
    ONES            reduce using rule 62 (BinaryOperator -> ADD .)
    ZEROS           reduce using rule 62 (BinaryOperator -> ADD .)
    FLOAT           reduce using rule 62 (BinaryOperator -> ADD .)
    INT             reduce using rule 62 (BinaryOperator -> ADD .)


state 80

    (76) ComparisonOperator -> LESS .
    SUB             reduce using rule 76 (ComparisonOperator -> LESS .)
    ID              reduce using rule 76 (ComparisonOperator -> LESS .)
    STRING          reduce using rule 76 (ComparisonOperator -> LESS .)
    [               reduce using rule 76 (ComparisonOperator -> LESS .)
    EYE             reduce using rule 76 (ComparisonOperator -> LESS .)
    ONES            reduce using rule 76 (ComparisonOperator -> LESS .)
    ZEROS           reduce using rule 76 (ComparisonOperator -> LESS .)
    FLOAT           reduce using rule 76 (ComparisonOperator -> LESS .)
    INT             reduce using rule 76 (ComparisonOperator -> LESS .)


state 81

    (77) ComparisonOperator -> GREATER .
    SUB             reduce using rule 77 (ComparisonOperator -> GREATER .)
    ID              reduce using rule 77 (ComparisonOperator -> GREATER .)
    STRING          reduce using rule 77 (ComparisonOperator -> GREATER .)
    [               reduce using rule 77 (ComparisonOperator -> GREATER .)
    EYE             reduce using rule 77 (ComparisonOperator -> GREATER .)
    ONES            reduce using rule 77 (ComparisonOperator -> GREATER .)
    ZEROS           reduce using rule 77 (ComparisonOperator -> GREATER .)
    FLOAT           reduce using rule 77 (ComparisonOperator -> GREATER .)
    INT             reduce using rule 77 (ComparisonOperator -> GREATER .)


state 82

    (78) ComparisonOperator -> NOT_EQ .
    SUB             reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    ID              reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    STRING          reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    [               reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    EYE             reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    ONES            reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    ZEROS           reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    FLOAT           reduce using rule 78 (ComparisonOperator -> NOT_EQ .)
    INT             reduce using rule 78 (ComparisonOperator -> NOT_EQ .)


state 83

    (79) ComparisonOperator -> GREATER_EQ .
    SUB             reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    ID              reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    STRING          reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    [               reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    EYE             reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    ONES            reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    ZEROS           reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    FLOAT           reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)
    INT             reduce using rule 79 (ComparisonOperator -> GREATER_EQ .)


state 84

    (80) ComparisonOperator -> LESS_EQ .
    SUB             reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    ID              reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    STRING          reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    [               reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    EYE             reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    ONES            reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    ZEROS           reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    FLOAT           reduce using rule 80 (ComparisonOperator -> LESS_EQ .)
    INT             reduce using rule 80 (ComparisonOperator -> LESS_EQ .)


state 85

    (81) ComparisonOperator -> EQ .
    SUB             reduce using rule 81 (ComparisonOperator -> EQ .)
    ID              reduce using rule 81 (ComparisonOperator -> EQ .)
    STRING          reduce using rule 81 (ComparisonOperator -> EQ .)
    [               reduce using rule 81 (ComparisonOperator -> EQ .)
    EYE             reduce using rule 81 (ComparisonOperator -> EQ .)
    ONES            reduce using rule 81 (ComparisonOperator -> EQ .)
    ZEROS           reduce using rule 81 (ComparisonOperator -> EQ .)
    FLOAT           reduce using rule 81 (ComparisonOperator -> EQ .)
    INT             reduce using rule 81 (ComparisonOperator -> EQ .)


state 86

    (52) MatrixRowList -> [ . MatrixRow ] , MatrixRowList
    (53) MatrixRow -> . empty
    (54) MatrixRow -> . Number , MatrixRow
    (2) empty -> .
    (74) Number -> . FLOAT
    (75) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    MatrixRow                      shift and go to state 105
    empty                          shift and go to state 106
    Number                         shift and go to state 107

state 87

    (47) Matrix -> [ MatrixRowList . ]
    ]               shift and go to state 108


state 88

    (51) MatrixRowList -> empty .
    ]               reduce using rule 51 (MatrixRowList -> empty .)


state 89

    (48) Matrix -> EYE ( . INT )
    INT             shift and go to state 109


state 90

    (49) Matrix -> ONES ( . INT )
    INT             shift and go to state 110


state 91

    (50) Matrix -> ZEROS ( . INT )
    INT             shift and go to state 111


state 92

    (63) AssignmentStatement -> ID MatrixAccess AssignmentOperator Expression .
    ;               reduce using rule 63 (AssignmentStatement -> ID MatrixAccess AssignmentOperator Expression .)


state 93

    (29) MatrixAccess -> [ MatrixAccessRange , . MatrixAccessRange ]
    (31) MatrixAccessRange -> . MatrixAccessRangeElement
    (32) MatrixAccessRange -> . MatrixAccessRangeElement : MatrixAccessRangeElement
    (33) MatrixAccessRangeElement -> . ID
    (34) MatrixAccessRangeElement -> . INT
    ID              shift and go to state 61
    INT             shift and go to state 62

    MatrixAccessRange              shift and go to state 112
    MatrixAccessRangeElement       shift and go to state 60

state 94

    (32) MatrixAccessRange -> MatrixAccessRangeElement : . MatrixAccessRangeElement
    (33) MatrixAccessRangeElement -> . ID
    (34) MatrixAccessRangeElement -> . INT
    ID              shift and go to state 61
    INT             shift and go to state 62

    MatrixAccessRangeElement       shift and go to state 113

state 95

    (37) RangeElement -> ID .
    :               reduce using rule 37 (RangeElement -> ID .)
    ID              reduce using rule 37 (RangeElement -> ID .)
    PRINT           reduce using rule 37 (RangeElement -> ID .)
    RETURN          reduce using rule 37 (RangeElement -> ID .)
    CONTINUE        reduce using rule 37 (RangeElement -> ID .)
    BREAK           reduce using rule 37 (RangeElement -> ID .)
    FOR             reduce using rule 37 (RangeElement -> ID .)
    WHILE           reduce using rule 37 (RangeElement -> ID .)
    IF              reduce using rule 37 (RangeElement -> ID .)
    {               reduce using rule 37 (RangeElement -> ID .)
    SUB             reduce using rule 37 (RangeElement -> ID .)
    STRING          reduce using rule 37 (RangeElement -> ID .)
    [               reduce using rule 37 (RangeElement -> ID .)
    EYE             reduce using rule 37 (RangeElement -> ID .)
    ONES            reduce using rule 37 (RangeElement -> ID .)
    ZEROS           reduce using rule 37 (RangeElement -> ID .)
    FLOAT           reduce using rule 37 (RangeElement -> ID .)
    INT             reduce using rule 37 (RangeElement -> ID .)


state 96

    (16) IterationStatement -> FOR ID ASS List . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 114
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 97

    (17) IterationStatement -> FOR ID ASS Range . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 115
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 98

    (39) List -> [ . ListContent ]
    (40) ListContent -> . empty
    (41) ListContent -> . ListEl , ListContent
    (2) empty -> .
    (42) ListEl -> . List
    (43) ListEl -> . Primitive
    (44) ListEl -> . ID
    (39) List -> . [ ListContent ]
    (45) Primitive -> . STRING
    (46) Primitive -> . Number
    (74) Number -> . FLOAT
    (75) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    ID              shift and go to state 121
    [               shift and go to state 98
    STRING          shift and go to state 49
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    ListContent                    shift and go to state 116
    empty                          shift and go to state 117
    ListEl                         shift and go to state 118
    List                           shift and go to state 119
    Primitive                      shift and go to state 120
    Number                         shift and go to state 50

state 99

    (35) Range -> RangeElement . : RangeElement : RangeElement
    (36) Range -> RangeElement . : RangeElement
    :               shift and go to state 122


state 100

    (38) RangeElement -> Number .
    :               reduce using rule 38 (RangeElement -> Number .)
    ID              reduce using rule 38 (RangeElement -> Number .)
    PRINT           reduce using rule 38 (RangeElement -> Number .)
    RETURN          reduce using rule 38 (RangeElement -> Number .)
    CONTINUE        reduce using rule 38 (RangeElement -> Number .)
    BREAK           reduce using rule 38 (RangeElement -> Number .)
    FOR             reduce using rule 38 (RangeElement -> Number .)
    WHILE           reduce using rule 38 (RangeElement -> Number .)
    IF              reduce using rule 38 (RangeElement -> Number .)
    {               reduce using rule 38 (RangeElement -> Number .)
    SUB             reduce using rule 38 (RangeElement -> Number .)
    STRING          reduce using rule 38 (RangeElement -> Number .)
    [               reduce using rule 38 (RangeElement -> Number .)
    EYE             reduce using rule 38 (RangeElement -> Number .)
    ONES            reduce using rule 38 (RangeElement -> Number .)
    ZEROS           reduce using rule 38 (RangeElement -> Number .)
    FLOAT           reduce using rule 38 (RangeElement -> Number .)
    INT             reduce using rule 38 (RangeElement -> Number .)


state 101

    (18) IterationStatement -> WHILE ( Expression ) . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 12
    Statement                      shift and go to state 123
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 102

    (14) SelectionStatement -> IF ( Expression ) . Statement ELSE Statement
    (15) SelectionStatement -> IF ( Expression ) . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 12
    Statement                      shift and go to state 124
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 103

    (27) PreExpressionPost -> Expression BinaryOperator Expression .
    MAT_TRANS       reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    ;               reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    DIV_EL          reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    MUL_EL          reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    SUB_EL          reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    ADD_EL          reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    DIV             reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    MUL             reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    SUB             reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    ADD             reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    LESS            reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    GREATER         reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    NOT_EQ          reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    GREATER_EQ      reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    LESS_EQ         reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    EQ              reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)
    )               reduce using rule 27 (PreExpressionPost -> Expression BinaryOperator Expression .)


state 104

    (28) PreExpressionPost -> Expression ComparisonOperator Expression .
    MAT_TRANS       reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    ;               reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    DIV_EL          reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    MUL_EL          reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    SUB_EL          reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    ADD_EL          reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    DIV             reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    MUL             reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    SUB             reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    ADD             reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    LESS            reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    GREATER         reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    NOT_EQ          reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    GREATER_EQ      reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    LESS_EQ         reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    EQ              reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)
    )               reduce using rule 28 (PreExpressionPost -> Expression ComparisonOperator Expression .)


state 105

    (52) MatrixRowList -> [ MatrixRow . ] , MatrixRowList
    ]               shift and go to state 125


state 106

    (53) MatrixRow -> empty .
    ]               reduce using rule 53 (MatrixRow -> empty .)


state 107

    (54) MatrixRow -> Number . , MatrixRow
    ,               shift and go to state 126


state 108

    (47) Matrix -> [ MatrixRowList ] .
    MAT_TRANS       reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    ;               reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    DIV_EL          reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    MUL_EL          reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    SUB_EL          reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    ADD_EL          reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    DIV             reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    MUL             reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    SUB             reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    ADD             reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    LESS            reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    GREATER         reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    NOT_EQ          reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    GREATER_EQ      reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    LESS_EQ         reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    EQ              reduce using rule 47 (Matrix -> [ MatrixRowList ] .)
    )               reduce using rule 47 (Matrix -> [ MatrixRowList ] .)


state 109

    (48) Matrix -> EYE ( INT . )
    )               shift and go to state 127


state 110

    (49) Matrix -> ONES ( INT . )
    )               shift and go to state 128


state 111

    (50) Matrix -> ZEROS ( INT . )
    )               shift and go to state 129


state 112

    (29) MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange . ]
    ]               shift and go to state 130


state 113

    (32) MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement .
    ,               reduce using rule 32 (MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement .)
    ]               reduce using rule 32 (MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement .)


state 114

    (16) IterationStatement -> FOR ID ASS List Statement .
    ID              reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    PRINT           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    RETURN          reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    CONTINUE        reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    BREAK           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    FOR             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    WHILE           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    IF              reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    {               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    SUB             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    STRING          reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    [               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    EYE             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    ONES            reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    ZEROS           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    FLOAT           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    INT             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    $end            reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    }               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    ELSE            reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)


state 115

    (17) IterationStatement -> FOR ID ASS Range Statement .
    ID              reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    PRINT           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    RETURN          reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    CONTINUE        reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    BREAK           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    FOR             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    WHILE           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    IF              reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    {               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    SUB             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    STRING          reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    [               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    EYE             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    ONES            reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    ZEROS           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    FLOAT           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    INT             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    $end            reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    }               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    ELSE            reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)


state 116

    (39) List -> [ ListContent . ]
    ]               shift and go to state 131


state 117

    (40) ListContent -> empty .
    ]               reduce using rule 40 (ListContent -> empty .)


state 118

    (41) ListContent -> ListEl . , ListContent
    ,               shift and go to state 132


state 119

    (42) ListEl -> List .
    ,               reduce using rule 42 (ListEl -> List .)


state 120

    (43) ListEl -> Primitive .
    ,               reduce using rule 43 (ListEl -> Primitive .)


state 121

    (44) ListEl -> ID .
    ,               reduce using rule 44 (ListEl -> ID .)


state 122

    (35) Range -> RangeElement : . RangeElement : RangeElement
    (36) Range -> RangeElement : . RangeElement
    (37) RangeElement -> . ID
    (38) RangeElement -> . Number
    (74) Number -> . FLOAT
    (75) Number -> . INT
    ID              shift and go to state 95
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    RangeElement                   shift and go to state 133
    Number                         shift and go to state 100

state 123

    (18) IterationStatement -> WHILE ( Expression ) Statement .
    ID              reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    PRINT           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    CONTINUE        reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    BREAK           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    SUB             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    STRING          reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    [               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    EYE             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    ONES            reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    ZEROS           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    FLOAT           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    INT             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    $end            reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)


state 124

    (14) SelectionStatement -> IF ( Expression ) Statement . ELSE Statement
    (15) SelectionStatement -> IF ( Expression ) Statement .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 134
    ID              reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    PRINT           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    RETURN          reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    CONTINUE        reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    BREAK           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    FOR             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    WHILE           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    IF              reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    {               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    SUB             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    STRING          reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    [               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    EYE             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    ONES            reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    ZEROS           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    FLOAT           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    INT             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    $end            reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    }               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)


state 125

    (52) MatrixRowList -> [ MatrixRow ] . , MatrixRowList
    ,               shift and go to state 135


state 126

    (54) MatrixRow -> Number , . MatrixRow
    (53) MatrixRow -> . empty
    (54) MatrixRow -> . Number , MatrixRow
    (2) empty -> .
    (74) Number -> . FLOAT
    (75) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    Number                         shift and go to state 107
    MatrixRow                      shift and go to state 136
    empty                          shift and go to state 106

state 127

    (48) Matrix -> EYE ( INT ) .
    MAT_TRANS       reduce using rule 48 (Matrix -> EYE ( INT ) .)
    ;               reduce using rule 48 (Matrix -> EYE ( INT ) .)
    DIV_EL          reduce using rule 48 (Matrix -> EYE ( INT ) .)
    MUL_EL          reduce using rule 48 (Matrix -> EYE ( INT ) .)
    SUB_EL          reduce using rule 48 (Matrix -> EYE ( INT ) .)
    ADD_EL          reduce using rule 48 (Matrix -> EYE ( INT ) .)
    DIV             reduce using rule 48 (Matrix -> EYE ( INT ) .)
    MUL             reduce using rule 48 (Matrix -> EYE ( INT ) .)
    SUB             reduce using rule 48 (Matrix -> EYE ( INT ) .)
    ADD             reduce using rule 48 (Matrix -> EYE ( INT ) .)
    LESS            reduce using rule 48 (Matrix -> EYE ( INT ) .)
    GREATER         reduce using rule 48 (Matrix -> EYE ( INT ) .)
    NOT_EQ          reduce using rule 48 (Matrix -> EYE ( INT ) .)
    GREATER_EQ      reduce using rule 48 (Matrix -> EYE ( INT ) .)
    LESS_EQ         reduce using rule 48 (Matrix -> EYE ( INT ) .)
    EQ              reduce using rule 48 (Matrix -> EYE ( INT ) .)
    )               reduce using rule 48 (Matrix -> EYE ( INT ) .)


state 128

    (49) Matrix -> ONES ( INT ) .
    MAT_TRANS       reduce using rule 49 (Matrix -> ONES ( INT ) .)
    ;               reduce using rule 49 (Matrix -> ONES ( INT ) .)
    DIV_EL          reduce using rule 49 (Matrix -> ONES ( INT ) .)
    MUL_EL          reduce using rule 49 (Matrix -> ONES ( INT ) .)
    SUB_EL          reduce using rule 49 (Matrix -> ONES ( INT ) .)
    ADD_EL          reduce using rule 49 (Matrix -> ONES ( INT ) .)
    DIV             reduce using rule 49 (Matrix -> ONES ( INT ) .)
    MUL             reduce using rule 49 (Matrix -> ONES ( INT ) .)
    SUB             reduce using rule 49 (Matrix -> ONES ( INT ) .)
    ADD             reduce using rule 49 (Matrix -> ONES ( INT ) .)
    LESS            reduce using rule 49 (Matrix -> ONES ( INT ) .)
    GREATER         reduce using rule 49 (Matrix -> ONES ( INT ) .)
    NOT_EQ          reduce using rule 49 (Matrix -> ONES ( INT ) .)
    GREATER_EQ      reduce using rule 49 (Matrix -> ONES ( INT ) .)
    LESS_EQ         reduce using rule 49 (Matrix -> ONES ( INT ) .)
    EQ              reduce using rule 49 (Matrix -> ONES ( INT ) .)
    )               reduce using rule 49 (Matrix -> ONES ( INT ) .)


state 129

    (50) Matrix -> ZEROS ( INT ) .
    MAT_TRANS       reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    ;               reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    DIV_EL          reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    MUL_EL          reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    SUB_EL          reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    ADD_EL          reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    DIV             reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    MUL             reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    SUB             reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    ADD             reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    LESS            reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    GREATER         reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    NOT_EQ          reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    GREATER_EQ      reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    LESS_EQ         reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    EQ              reduce using rule 50 (Matrix -> ZEROS ( INT ) .)
    )               reduce using rule 50 (Matrix -> ZEROS ( INT ) .)


state 130

    (29) MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .
    ASS_MUL         reduce using rule 29 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS_DIV         reduce using rule 29 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS_SUB         reduce using rule 29 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS_ADD         reduce using rule 29 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS             reduce using rule 29 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)


state 131

    (39) List -> [ ListContent ] .
    ID              reduce using rule 39 (List -> [ ListContent ] .)
    PRINT           reduce using rule 39 (List -> [ ListContent ] .)
    RETURN          reduce using rule 39 (List -> [ ListContent ] .)
    CONTINUE        reduce using rule 39 (List -> [ ListContent ] .)
    BREAK           reduce using rule 39 (List -> [ ListContent ] .)
    FOR             reduce using rule 39 (List -> [ ListContent ] .)
    WHILE           reduce using rule 39 (List -> [ ListContent ] .)
    IF              reduce using rule 39 (List -> [ ListContent ] .)
    {               reduce using rule 39 (List -> [ ListContent ] .)
    SUB             reduce using rule 39 (List -> [ ListContent ] .)
    STRING          reduce using rule 39 (List -> [ ListContent ] .)
    [               reduce using rule 39 (List -> [ ListContent ] .)
    EYE             reduce using rule 39 (List -> [ ListContent ] .)
    ONES            reduce using rule 39 (List -> [ ListContent ] .)
    ZEROS           reduce using rule 39 (List -> [ ListContent ] .)
    FLOAT           reduce using rule 39 (List -> [ ListContent ] .)
    INT             reduce using rule 39 (List -> [ ListContent ] .)
    ,               reduce using rule 39 (List -> [ ListContent ] .)


state 132

    (41) ListContent -> ListEl , . ListContent
    (40) ListContent -> . empty
    (41) ListContent -> . ListEl , ListContent
    (2) empty -> .
    (42) ListEl -> . List
    (43) ListEl -> . Primitive
    (44) ListEl -> . ID
    (39) List -> . [ ListContent ]
    (45) Primitive -> . STRING
    (46) Primitive -> . Number
    (74) Number -> . FLOAT
    (75) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    ID              shift and go to state 121
    [               shift and go to state 98
    STRING          shift and go to state 49
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    ListEl                         shift and go to state 118
    ListContent                    shift and go to state 137
    empty                          shift and go to state 117
    List                           shift and go to state 119
    Primitive                      shift and go to state 120
    Number                         shift and go to state 50

state 133

    (35) Range -> RangeElement : RangeElement . : RangeElement
    (36) Range -> RangeElement : RangeElement .
    :               shift and go to state 138
    ID              reduce using rule 36 (Range -> RangeElement : RangeElement .)
    PRINT           reduce using rule 36 (Range -> RangeElement : RangeElement .)
    RETURN          reduce using rule 36 (Range -> RangeElement : RangeElement .)
    CONTINUE        reduce using rule 36 (Range -> RangeElement : RangeElement .)
    BREAK           reduce using rule 36 (Range -> RangeElement : RangeElement .)
    FOR             reduce using rule 36 (Range -> RangeElement : RangeElement .)
    WHILE           reduce using rule 36 (Range -> RangeElement : RangeElement .)
    IF              reduce using rule 36 (Range -> RangeElement : RangeElement .)
    {               reduce using rule 36 (Range -> RangeElement : RangeElement .)
    SUB             reduce using rule 36 (Range -> RangeElement : RangeElement .)
    STRING          reduce using rule 36 (Range -> RangeElement : RangeElement .)
    [               reduce using rule 36 (Range -> RangeElement : RangeElement .)
    EYE             reduce using rule 36 (Range -> RangeElement : RangeElement .)
    ONES            reduce using rule 36 (Range -> RangeElement : RangeElement .)
    ZEROS           reduce using rule 36 (Range -> RangeElement : RangeElement .)
    FLOAT           reduce using rule 36 (Range -> RangeElement : RangeElement .)
    INT             reduce using rule 36 (Range -> RangeElement : RangeElement .)


state 134

    (14) SelectionStatement -> IF ( Expression ) Statement ELSE . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (63) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (64) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . PrefixUnaryOperator PreExpressionPost PostfixUnaryOperator
    (70) PrefixUnaryOperator -> . empty
    (71) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 24
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 12
    Statement                      shift and go to state 139
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    PrefixUnaryOperator            shift and go to state 22
    empty                          shift and go to state 23

state 135

    (52) MatrixRowList -> [ MatrixRow ] , . MatrixRowList
    (51) MatrixRowList -> . empty
    (52) MatrixRowList -> . [ MatrixRow ] , MatrixRowList
    (2) empty -> .
    [               shift and go to state 86
    ]               reduce using rule 2 (empty -> .)

    MatrixRowList                  shift and go to state 140
    empty                          shift and go to state 88

state 136

    (54) MatrixRow -> Number , MatrixRow .
    ]               reduce using rule 54 (MatrixRow -> Number , MatrixRow .)


state 137

    (41) ListContent -> ListEl , ListContent .
    ]               reduce using rule 41 (ListContent -> ListEl , ListContent .)


state 138

    (35) Range -> RangeElement : RangeElement : . RangeElement
    (37) RangeElement -> . ID
    (38) RangeElement -> . Number
    (74) Number -> . FLOAT
    (75) Number -> . INT
    ID              shift and go to state 95
    FLOAT           shift and go to state 56
    INT             shift and go to state 53

    RangeElement                   shift and go to state 141
    Number                         shift and go to state 100

state 139

    (14) SelectionStatement -> IF ( Expression ) Statement ELSE Statement .
    ID              reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    PRINT           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    RETURN          reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    CONTINUE        reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    BREAK           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    FOR             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    SUB             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    STRING          reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    [               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    EYE             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    ONES            reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    ZEROS           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    FLOAT           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    INT             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    $end            reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)


state 140

    (52) MatrixRowList -> [ MatrixRow ] , MatrixRowList .
    ]               reduce using rule 52 (MatrixRowList -> [ MatrixRow ] , MatrixRowList .)


state 141

    (35) Range -> RangeElement : RangeElement : RangeElement .
    ID              reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    PRINT           reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    RETURN          reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    CONTINUE        reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    BREAK           reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    FOR             reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    WHILE           reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    IF              reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    {               reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    SUB             reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    STRING          reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    [               reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    EYE             reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    ONES            reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    ZEROS           reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    FLOAT           reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)
    INT             reduce using rule 35 (Range -> RangeElement : RangeElement : RangeElement .)


Conflicts:

shift/reduce conflict for ID in state 2 resolved as shift
shift/reduce conflict for SUB in state 2 resolved as shift
shift/reduce conflict for ASS_MUL in state 13 resolved as shift
shift/reduce conflict for ASS_DIV in state 13 resolved as shift
shift/reduce conflict for ASS_SUB in state 13 resolved as shift
shift/reduce conflict for ASS_ADD in state 13 resolved as shift
shift/reduce conflict for ASS in state 13 resolved as shift
shift/reduce conflict for SUB in state 14 resolved as shift
shift/reduce conflict for SUB in state 15 resolved as shift
shift/reduce conflict for ID in state 22 resolved as shift
shift/reduce conflict for STRING in state 22 resolved as shift
shift/reduce conflict for [ in state 22 resolved as shift
shift/reduce conflict for EYE in state 22 resolved as shift
shift/reduce conflict for ONES in state 22 resolved as shift
shift/reduce conflict for ZEROS in state 22 resolved as shift
shift/reduce conflict for FLOAT in state 22 resolved as shift
shift/reduce conflict for INT in state 22 resolved as shift
shift/reduce conflict for SUB in state 22 resolved as shift
shift/reduce conflict for SUB in state 30 resolved as shift
shift/reduce conflict for SUB in state 41 resolved as shift
shift/reduce conflict for SUB in state 42 resolved as shift
shift/reduce conflict for ID in state 43 resolved as shift
shift/reduce conflict for SUB in state 43 resolved as shift
shift/reduce conflict for MAT_TRANS in state 44 resolved as shift
shift/reduce conflict for SUB in state 57 resolved as shift
shift/reduce conflict for SUB in state 70 resolved as shift
shift/reduce conflict for SUB in state 71 resolved as shift
shift/reduce conflict for ID in state 96 resolved as shift
shift/reduce conflict for SUB in state 96 resolved as shift
shift/reduce conflict for ID in state 97 resolved as shift
shift/reduce conflict for SUB in state 97 resolved as shift
shift/reduce conflict for ID in state 101 resolved as shift
shift/reduce conflict for SUB in state 101 resolved as shift
shift/reduce conflict for ID in state 102 resolved as shift
shift/reduce conflict for SUB in state 102 resolved as shift
shift/reduce conflict for ELSE in state 124 resolved as shift
shift/reduce conflict for ID in state 134 resolved as shift
shift/reduce conflict for SUB in state 134 resolved as shift