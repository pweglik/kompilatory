Grammar:

Rule 0     S' -> Program
Rule 1     Program -> StatementList
Rule 2     empty -> <empty>
Rule 3     StatementList -> empty
Rule 4     StatementList -> StatementList Statement
Rule 5     Statement -> ExpressionStatement ;
Rule 6     Statement -> AssignmentStatement ;
Rule 7     Statement -> PrintStatement ;
Rule 8     Statement -> JumpStatement ;
Rule 9     Statement -> IterationStatement
Rule 10    Statement -> SelectionStatement
Rule 11    Statement -> CompoundStatement
Rule 12    CompoundStatement -> { StatementList }
Rule 13    ExpressionStatement -> Expression
Rule 14    SelectionStatement -> IF ( Expression ) Statement ELSE Statement
Rule 15    SelectionStatement -> IF ( Expression ) Statement
Rule 16    IterationStatement -> FOR ID ASS List Statement
Rule 17    IterationStatement -> FOR ID ASS Range Statement
Rule 18    IterationStatement -> WHILE ( Expression ) Statement
Rule 19    JumpStatement -> RETURN Expression
Rule 20    JumpStatement -> CONTINUE
Rule 21    JumpStatement -> BREAK
Rule 22    PrintStatement -> PRINT Expression
Rule 23    Expression -> ComplexExpression
Rule 24    Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
Rule 25    Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
Rule 26    ComplexExpression -> Expression BinaryOperator Expression
Rule 27    ComplexExpression -> Expression ComparisonOperator Expression
Rule 28    SimpleExpression -> ID
Rule 29    SimpleExpression -> Primitive
Rule 30    SimpleExpression -> Matrix
Rule 31    MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ]
Rule 32    MatrixAccess -> empty
Rule 33    MatrixAccessRange -> MatrixAccessRangeElement
Rule 34    MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement
Rule 35    MatrixAccessRangeElement -> ID
Rule 36    MatrixAccessRangeElement -> INT
Rule 37    Range -> RangeElement : RangeElement : RangeElement
Rule 38    Range -> RangeElement : RangeElement
Rule 39    RangeElement -> ID
Rule 40    RangeElement -> Number
Rule 41    List -> [ ListContent ]
Rule 42    ListContent -> empty
Rule 43    ListContent -> ListEl , ListContent
Rule 44    ListEl -> List
Rule 45    ListEl -> Primitive
Rule 46    ListEl -> ID
Rule 47    Primitive -> STRING
Rule 48    Primitive -> Number
Rule 49    Matrix -> [ MatrixRowList ]
Rule 50    Matrix -> EYE ( INT )
Rule 51    Matrix -> ONES ( INT )
Rule 52    Matrix -> ZEROS ( INT )
Rule 53    MatrixRowList -> empty
Rule 54    MatrixRowList -> [ MatrixRow ] , MatrixRowList
Rule 55    MatrixRow -> empty
Rule 56    MatrixRow -> Number , MatrixRow
Rule 57    BinaryOperator -> DIV_EL
Rule 58    BinaryOperator -> MUL_EL
Rule 59    BinaryOperator -> SUB_EL
Rule 60    BinaryOperator -> ADD_EL
Rule 61    BinaryOperator -> DIV
Rule 62    BinaryOperator -> MUL
Rule 63    BinaryOperator -> SUB
Rule 64    BinaryOperator -> ADD
Rule 65    AssignmentStatement -> ID MatrixAccess AssignmentOperator Expression
Rule 66    AssignmentStatement -> ID AssignmentOperator Expression
Rule 67    AssignmentOperator -> ASS_MUL
Rule 68    AssignmentOperator -> ASS_DIV
Rule 69    AssignmentOperator -> ASS_SUB
Rule 70    AssignmentOperator -> ASS_ADD
Rule 71    AssignmentOperator -> ASS
Rule 72    PrefixUnaryOperator -> empty
Rule 73    PrefixUnaryOperator -> SUB
Rule 74    PostfixUnaryOperator -> empty
Rule 75    PostfixUnaryOperator -> MatrixAccess
Rule 76    PostfixUnaryOperator -> MAT_TRANS
Rule 77    Number -> FLOAT
Rule 78    Number -> INT
Rule 79    ComparisonOperator -> LESS
Rule 80    ComparisonOperator -> GREATER
Rule 81    ComparisonOperator -> NOT_EQ
Rule 82    ComparisonOperator -> GREATER_EQ
Rule 83    ComparisonOperator -> LESS_EQ
Rule 84    ComparisonOperator -> EQ

Terminals, with rules where they appear:

(                    : 14 15 18 24 50 51 52
)                    : 14 15 18 24 50 51 52
,                    : 31 43 54 56
:                    : 34 37 37 38
;                    : 5 6 7 8
ADD                  : 64
ADD_EL               : 60
ASS                  : 16 17 71
ASS_ADD              : 70
ASS_DIV              : 68
ASS_MUL              : 67
ASS_SUB              : 69
BREAK                : 21
CONTINUE             : 20
DIV                  : 61
DIV_EL               : 57
ELSE                 : 14
EQ                   : 84
EYE                  : 50
FLOAT                : 77
FOR                  : 16 17
GREATER              : 80
GREATER_EQ           : 82
ID                   : 16 17 28 35 39 46 65 66
IF                   : 14 15
INT                  : 36 50 51 52 78
LESS                 : 79
LESS_EQ              : 83
MAT_TRANS            : 76
MUL                  : 62
MUL_EL               : 58
NOT_EQ               : 81
ONES                 : 51
PRINT                : 22
RETURN               : 19
STRING               : 47
SUB                  : 63 73
SUB_EL               : 59
WHILE                : 18
ZEROS                : 52
[                    : 31 41 49 54
]                    : 31 41 49 54
error                : 
{                    : 12
}                    : 12

Nonterminals, with rules where they appear:

AssignmentOperator   : 65 66
AssignmentStatement  : 6
BinaryOperator       : 26
ComparisonOperator   : 27
ComplexExpression    : 23 24
CompoundStatement    : 11
Expression           : 13 14 15 18 19 22 26 26 27 27 65 66
ExpressionStatement  : 5
IterationStatement   : 9
JumpStatement        : 8
List                 : 16 44
ListContent          : 41 43
ListEl               : 43
Matrix               : 30
MatrixAccess         : 65 75
MatrixAccessRange    : 31 31
MatrixAccessRangeElement : 33 34 34
MatrixRow            : 54 56
MatrixRowList        : 49 54
Number               : 40 48 56
PostfixUnaryOperator : 24 25
PrefixUnaryOperator  : 24 25
Primitive            : 29 45
PrintStatement       : 7
Program              : 0
Range                : 17
RangeElement         : 37 37 37 38 38
SelectionStatement   : 10
SimpleExpression     : 25
Statement            : 4 14 14 15 16 17 18
StatementList        : 1 4 12
empty                : 3 32 42 53 55 72 74


state 0

    (0) S' -> . Program
    (1) Program -> . StatementList
    (3) StatementList -> . empty
    (4) StatementList -> . StatementList Statement
    (2) empty -> .
    ID              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    CONTINUE        reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)

    Program                        shift and go to state 1
    StatementList                  shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> Program .


state 2

    (1) Program -> StatementList .
    (4) StatementList -> StatementList . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    $end            reduce using rule 1 (Program -> StatementList .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 4
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 3

    (3) StatementList -> empty .
    ID              reduce using rule 3 (StatementList -> empty .)
    PRINT           reduce using rule 3 (StatementList -> empty .)
    RETURN          reduce using rule 3 (StatementList -> empty .)
    CONTINUE        reduce using rule 3 (StatementList -> empty .)
    BREAK           reduce using rule 3 (StatementList -> empty .)
    FOR             reduce using rule 3 (StatementList -> empty .)
    WHILE           reduce using rule 3 (StatementList -> empty .)
    IF              reduce using rule 3 (StatementList -> empty .)
    {               reduce using rule 3 (StatementList -> empty .)
    SUB             reduce using rule 3 (StatementList -> empty .)
    (               reduce using rule 3 (StatementList -> empty .)
    STRING          reduce using rule 3 (StatementList -> empty .)
    [               reduce using rule 3 (StatementList -> empty .)
    EYE             reduce using rule 3 (StatementList -> empty .)
    ONES            reduce using rule 3 (StatementList -> empty .)
    ZEROS           reduce using rule 3 (StatementList -> empty .)
    FLOAT           reduce using rule 3 (StatementList -> empty .)
    INT             reduce using rule 3 (StatementList -> empty .)
    $end            reduce using rule 3 (StatementList -> empty .)
    }               reduce using rule 3 (StatementList -> empty .)


state 4

    (4) StatementList -> StatementList Statement .
    ID              reduce using rule 4 (StatementList -> StatementList Statement .)
    PRINT           reduce using rule 4 (StatementList -> StatementList Statement .)
    RETURN          reduce using rule 4 (StatementList -> StatementList Statement .)
    CONTINUE        reduce using rule 4 (StatementList -> StatementList Statement .)
    BREAK           reduce using rule 4 (StatementList -> StatementList Statement .)
    FOR             reduce using rule 4 (StatementList -> StatementList Statement .)
    WHILE           reduce using rule 4 (StatementList -> StatementList Statement .)
    IF              reduce using rule 4 (StatementList -> StatementList Statement .)
    {               reduce using rule 4 (StatementList -> StatementList Statement .)
    SUB             reduce using rule 4 (StatementList -> StatementList Statement .)
    (               reduce using rule 4 (StatementList -> StatementList Statement .)
    STRING          reduce using rule 4 (StatementList -> StatementList Statement .)
    [               reduce using rule 4 (StatementList -> StatementList Statement .)
    EYE             reduce using rule 4 (StatementList -> StatementList Statement .)
    ONES            reduce using rule 4 (StatementList -> StatementList Statement .)
    ZEROS           reduce using rule 4 (StatementList -> StatementList Statement .)
    FLOAT           reduce using rule 4 (StatementList -> StatementList Statement .)
    INT             reduce using rule 4 (StatementList -> StatementList Statement .)
    $end            reduce using rule 4 (StatementList -> StatementList Statement .)
    }               reduce using rule 4 (StatementList -> StatementList Statement .)


state 5

    (5) Statement -> ExpressionStatement . ;
    ;               shift and go to state 26


state 6

    (6) Statement -> AssignmentStatement . ;
    ;               shift and go to state 27


state 7

    (7) Statement -> PrintStatement . ;
    ;               shift and go to state 28


state 8

    (8) Statement -> JumpStatement . ;
    ;               shift and go to state 29


state 9

    (9) Statement -> IterationStatement .
    ID              reduce using rule 9 (Statement -> IterationStatement .)
    PRINT           reduce using rule 9 (Statement -> IterationStatement .)
    RETURN          reduce using rule 9 (Statement -> IterationStatement .)
    CONTINUE        reduce using rule 9 (Statement -> IterationStatement .)
    BREAK           reduce using rule 9 (Statement -> IterationStatement .)
    FOR             reduce using rule 9 (Statement -> IterationStatement .)
    WHILE           reduce using rule 9 (Statement -> IterationStatement .)
    IF              reduce using rule 9 (Statement -> IterationStatement .)
    {               reduce using rule 9 (Statement -> IterationStatement .)
    SUB             reduce using rule 9 (Statement -> IterationStatement .)
    (               reduce using rule 9 (Statement -> IterationStatement .)
    STRING          reduce using rule 9 (Statement -> IterationStatement .)
    [               reduce using rule 9 (Statement -> IterationStatement .)
    EYE             reduce using rule 9 (Statement -> IterationStatement .)
    ONES            reduce using rule 9 (Statement -> IterationStatement .)
    ZEROS           reduce using rule 9 (Statement -> IterationStatement .)
    FLOAT           reduce using rule 9 (Statement -> IterationStatement .)
    INT             reduce using rule 9 (Statement -> IterationStatement .)
    $end            reduce using rule 9 (Statement -> IterationStatement .)
    }               reduce using rule 9 (Statement -> IterationStatement .)
    ELSE            reduce using rule 9 (Statement -> IterationStatement .)


state 10

    (10) Statement -> SelectionStatement .
    ID              reduce using rule 10 (Statement -> SelectionStatement .)
    PRINT           reduce using rule 10 (Statement -> SelectionStatement .)
    RETURN          reduce using rule 10 (Statement -> SelectionStatement .)
    CONTINUE        reduce using rule 10 (Statement -> SelectionStatement .)
    BREAK           reduce using rule 10 (Statement -> SelectionStatement .)
    FOR             reduce using rule 10 (Statement -> SelectionStatement .)
    WHILE           reduce using rule 10 (Statement -> SelectionStatement .)
    IF              reduce using rule 10 (Statement -> SelectionStatement .)
    {               reduce using rule 10 (Statement -> SelectionStatement .)
    SUB             reduce using rule 10 (Statement -> SelectionStatement .)
    (               reduce using rule 10 (Statement -> SelectionStatement .)
    STRING          reduce using rule 10 (Statement -> SelectionStatement .)
    [               reduce using rule 10 (Statement -> SelectionStatement .)
    EYE             reduce using rule 10 (Statement -> SelectionStatement .)
    ONES            reduce using rule 10 (Statement -> SelectionStatement .)
    ZEROS           reduce using rule 10 (Statement -> SelectionStatement .)
    FLOAT           reduce using rule 10 (Statement -> SelectionStatement .)
    INT             reduce using rule 10 (Statement -> SelectionStatement .)
    $end            reduce using rule 10 (Statement -> SelectionStatement .)
    }               reduce using rule 10 (Statement -> SelectionStatement .)
    ELSE            reduce using rule 10 (Statement -> SelectionStatement .)


state 11

    (11) Statement -> CompoundStatement .
    ID              reduce using rule 11 (Statement -> CompoundStatement .)
    PRINT           reduce using rule 11 (Statement -> CompoundStatement .)
    RETURN          reduce using rule 11 (Statement -> CompoundStatement .)
    CONTINUE        reduce using rule 11 (Statement -> CompoundStatement .)
    BREAK           reduce using rule 11 (Statement -> CompoundStatement .)
    FOR             reduce using rule 11 (Statement -> CompoundStatement .)
    WHILE           reduce using rule 11 (Statement -> CompoundStatement .)
    IF              reduce using rule 11 (Statement -> CompoundStatement .)
    {               reduce using rule 11 (Statement -> CompoundStatement .)
    SUB             reduce using rule 11 (Statement -> CompoundStatement .)
    (               reduce using rule 11 (Statement -> CompoundStatement .)
    STRING          reduce using rule 11 (Statement -> CompoundStatement .)
    [               reduce using rule 11 (Statement -> CompoundStatement .)
    EYE             reduce using rule 11 (Statement -> CompoundStatement .)
    ONES            reduce using rule 11 (Statement -> CompoundStatement .)
    ZEROS           reduce using rule 11 (Statement -> CompoundStatement .)
    FLOAT           reduce using rule 11 (Statement -> CompoundStatement .)
    INT             reduce using rule 11 (Statement -> CompoundStatement .)
    $end            reduce using rule 11 (Statement -> CompoundStatement .)
    }               reduce using rule 11 (Statement -> CompoundStatement .)
    ELSE            reduce using rule 11 (Statement -> CompoundStatement .)


state 12

    (13) ExpressionStatement -> Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    ;               reduce using rule 13 (ExpressionStatement -> Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 13

    (65) AssignmentStatement -> ID . MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> ID . AssignmentOperator Expression
    (31) MatrixAccess -> . [ MatrixAccessRange , MatrixAccessRange ]
    (32) MatrixAccess -> . empty
    (67) AssignmentOperator -> . ASS_MUL
    (68) AssignmentOperator -> . ASS_DIV
    (69) AssignmentOperator -> . ASS_SUB
    (70) AssignmentOperator -> . ASS_ADD
    (71) AssignmentOperator -> . ASS
    (2) empty -> .
  ! shift/reduce conflict for ASS_MUL resolved as shift
  ! shift/reduce conflict for ASS_DIV resolved as shift
  ! shift/reduce conflict for ASS_SUB resolved as shift
  ! shift/reduce conflict for ASS_ADD resolved as shift
  ! shift/reduce conflict for ASS resolved as shift
    [               shift and go to state 48
    ASS_MUL         shift and go to state 50
    ASS_DIV         shift and go to state 51
    ASS_SUB         shift and go to state 52
    ASS_ADD         shift and go to state 53
    ASS             shift and go to state 54

    MatrixAccess                   shift and go to state 46
    AssignmentOperator             shift and go to state 47
    empty                          shift and go to state 49

state 14

    (22) PrintStatement -> PRINT . Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 55
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 15

    (19) JumpStatement -> RETURN . Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 56
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 16

    (20) JumpStatement -> CONTINUE .
    ;               reduce using rule 20 (JumpStatement -> CONTINUE .)


state 17

    (21) JumpStatement -> BREAK .
    ;               reduce using rule 21 (JumpStatement -> BREAK .)


state 18

    (16) IterationStatement -> FOR . ID ASS List Statement
    (17) IterationStatement -> FOR . ID ASS Range Statement
    ID              shift and go to state 57


state 19

    (18) IterationStatement -> WHILE . ( Expression ) Statement
    (               shift and go to state 58


state 20

    (14) SelectionStatement -> IF . ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> IF . ( Expression ) Statement
    (               shift and go to state 59


state 21

    (12) CompoundStatement -> { . StatementList }
    (3) StatementList -> . empty
    (4) StatementList -> . StatementList Statement
    (2) empty -> .
    }               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    CONTINUE        reduce using rule 2 (empty -> .)
    BREAK           reduce using rule 2 (empty -> .)
    FOR             reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    {               reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    StatementList                  shift and go to state 60
    empty                          shift and go to state 3

state 22

    (23) Expression -> ComplexExpression .
    DIV_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    MUL_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    SUB_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    ADD_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    DIV             reduce using rule 23 (Expression -> ComplexExpression .)
    MUL             reduce using rule 23 (Expression -> ComplexExpression .)
    SUB             reduce using rule 23 (Expression -> ComplexExpression .)
    ADD             reduce using rule 23 (Expression -> ComplexExpression .)
    LESS            reduce using rule 23 (Expression -> ComplexExpression .)
    GREATER         reduce using rule 23 (Expression -> ComplexExpression .)
    NOT_EQ          reduce using rule 23 (Expression -> ComplexExpression .)
    GREATER_EQ      reduce using rule 23 (Expression -> ComplexExpression .)
    LESS_EQ         reduce using rule 23 (Expression -> ComplexExpression .)
    EQ              reduce using rule 23 (Expression -> ComplexExpression .)
    ;               reduce using rule 23 (Expression -> ComplexExpression .)
    )               reduce using rule 23 (Expression -> ComplexExpression .)


state 23

    (24) Expression -> PrefixUnaryOperator . ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> PrefixUnaryOperator . SimpleExpression PostfixUnaryOperator
    (28) SimpleExpression -> . ID
    (29) SimpleExpression -> . Primitive
    (30) SimpleExpression -> . Matrix
    (47) Primitive -> . STRING
    (48) Primitive -> . Number
    (49) Matrix -> . [ MatrixRowList ]
    (50) Matrix -> . EYE ( INT )
    (51) Matrix -> . ONES ( INT )
    (52) Matrix -> . ZEROS ( INT )
    (77) Number -> . FLOAT
    (78) Number -> . INT
    (               shift and go to state 61
    ID              shift and go to state 63
    STRING          shift and go to state 66
    [               shift and go to state 68
    EYE             shift and go to state 69
    ONES            shift and go to state 71
    ZEROS           shift and go to state 72
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    SimpleExpression               shift and go to state 62
    Primitive                      shift and go to state 64
    Matrix                         shift and go to state 65
    Number                         shift and go to state 67

state 24

    (72) PrefixUnaryOperator -> empty .
    (               reduce using rule 72 (PrefixUnaryOperator -> empty .)
    ID              reduce using rule 72 (PrefixUnaryOperator -> empty .)
    STRING          reduce using rule 72 (PrefixUnaryOperator -> empty .)
    [               reduce using rule 72 (PrefixUnaryOperator -> empty .)
    EYE             reduce using rule 72 (PrefixUnaryOperator -> empty .)
    ONES            reduce using rule 72 (PrefixUnaryOperator -> empty .)
    ZEROS           reduce using rule 72 (PrefixUnaryOperator -> empty .)
    FLOAT           reduce using rule 72 (PrefixUnaryOperator -> empty .)
    INT             reduce using rule 72 (PrefixUnaryOperator -> empty .)


state 25

    (73) PrefixUnaryOperator -> SUB .
    (               reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    ID              reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    STRING          reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    [               reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    EYE             reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    ONES            reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    ZEROS           reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    FLOAT           reduce using rule 73 (PrefixUnaryOperator -> SUB .)
    INT             reduce using rule 73 (PrefixUnaryOperator -> SUB .)


state 26

    (5) Statement -> ExpressionStatement ; .
    ID              reduce using rule 5 (Statement -> ExpressionStatement ; .)
    PRINT           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    RETURN          reduce using rule 5 (Statement -> ExpressionStatement ; .)
    CONTINUE        reduce using rule 5 (Statement -> ExpressionStatement ; .)
    BREAK           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    FOR             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    WHILE           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    IF              reduce using rule 5 (Statement -> ExpressionStatement ; .)
    {               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    SUB             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    (               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    STRING          reduce using rule 5 (Statement -> ExpressionStatement ; .)
    [               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    EYE             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    ONES            reduce using rule 5 (Statement -> ExpressionStatement ; .)
    ZEROS           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    FLOAT           reduce using rule 5 (Statement -> ExpressionStatement ; .)
    INT             reduce using rule 5 (Statement -> ExpressionStatement ; .)
    $end            reduce using rule 5 (Statement -> ExpressionStatement ; .)
    }               reduce using rule 5 (Statement -> ExpressionStatement ; .)
    ELSE            reduce using rule 5 (Statement -> ExpressionStatement ; .)


state 27

    (6) Statement -> AssignmentStatement ; .
    ID              reduce using rule 6 (Statement -> AssignmentStatement ; .)
    PRINT           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    RETURN          reduce using rule 6 (Statement -> AssignmentStatement ; .)
    CONTINUE        reduce using rule 6 (Statement -> AssignmentStatement ; .)
    BREAK           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    FOR             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    WHILE           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    IF              reduce using rule 6 (Statement -> AssignmentStatement ; .)
    {               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    SUB             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    (               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    STRING          reduce using rule 6 (Statement -> AssignmentStatement ; .)
    [               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    EYE             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    ONES            reduce using rule 6 (Statement -> AssignmentStatement ; .)
    ZEROS           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    FLOAT           reduce using rule 6 (Statement -> AssignmentStatement ; .)
    INT             reduce using rule 6 (Statement -> AssignmentStatement ; .)
    $end            reduce using rule 6 (Statement -> AssignmentStatement ; .)
    }               reduce using rule 6 (Statement -> AssignmentStatement ; .)
    ELSE            reduce using rule 6 (Statement -> AssignmentStatement ; .)


state 28

    (7) Statement -> PrintStatement ; .
    ID              reduce using rule 7 (Statement -> PrintStatement ; .)
    PRINT           reduce using rule 7 (Statement -> PrintStatement ; .)
    RETURN          reduce using rule 7 (Statement -> PrintStatement ; .)
    CONTINUE        reduce using rule 7 (Statement -> PrintStatement ; .)
    BREAK           reduce using rule 7 (Statement -> PrintStatement ; .)
    FOR             reduce using rule 7 (Statement -> PrintStatement ; .)
    WHILE           reduce using rule 7 (Statement -> PrintStatement ; .)
    IF              reduce using rule 7 (Statement -> PrintStatement ; .)
    {               reduce using rule 7 (Statement -> PrintStatement ; .)
    SUB             reduce using rule 7 (Statement -> PrintStatement ; .)
    (               reduce using rule 7 (Statement -> PrintStatement ; .)
    STRING          reduce using rule 7 (Statement -> PrintStatement ; .)
    [               reduce using rule 7 (Statement -> PrintStatement ; .)
    EYE             reduce using rule 7 (Statement -> PrintStatement ; .)
    ONES            reduce using rule 7 (Statement -> PrintStatement ; .)
    ZEROS           reduce using rule 7 (Statement -> PrintStatement ; .)
    FLOAT           reduce using rule 7 (Statement -> PrintStatement ; .)
    INT             reduce using rule 7 (Statement -> PrintStatement ; .)
    $end            reduce using rule 7 (Statement -> PrintStatement ; .)
    }               reduce using rule 7 (Statement -> PrintStatement ; .)
    ELSE            reduce using rule 7 (Statement -> PrintStatement ; .)


state 29

    (8) Statement -> JumpStatement ; .
    ID              reduce using rule 8 (Statement -> JumpStatement ; .)
    PRINT           reduce using rule 8 (Statement -> JumpStatement ; .)
    RETURN          reduce using rule 8 (Statement -> JumpStatement ; .)
    CONTINUE        reduce using rule 8 (Statement -> JumpStatement ; .)
    BREAK           reduce using rule 8 (Statement -> JumpStatement ; .)
    FOR             reduce using rule 8 (Statement -> JumpStatement ; .)
    WHILE           reduce using rule 8 (Statement -> JumpStatement ; .)
    IF              reduce using rule 8 (Statement -> JumpStatement ; .)
    {               reduce using rule 8 (Statement -> JumpStatement ; .)
    SUB             reduce using rule 8 (Statement -> JumpStatement ; .)
    (               reduce using rule 8 (Statement -> JumpStatement ; .)
    STRING          reduce using rule 8 (Statement -> JumpStatement ; .)
    [               reduce using rule 8 (Statement -> JumpStatement ; .)
    EYE             reduce using rule 8 (Statement -> JumpStatement ; .)
    ONES            reduce using rule 8 (Statement -> JumpStatement ; .)
    ZEROS           reduce using rule 8 (Statement -> JumpStatement ; .)
    FLOAT           reduce using rule 8 (Statement -> JumpStatement ; .)
    INT             reduce using rule 8 (Statement -> JumpStatement ; .)
    $end            reduce using rule 8 (Statement -> JumpStatement ; .)
    }               reduce using rule 8 (Statement -> JumpStatement ; .)
    ELSE            reduce using rule 8 (Statement -> JumpStatement ; .)


state 30

    (26) ComplexExpression -> Expression BinaryOperator . Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 74
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 31

    (27) ComplexExpression -> Expression ComparisonOperator . Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 75
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 32

    (57) BinaryOperator -> DIV_EL .
    SUB             reduce using rule 57 (BinaryOperator -> DIV_EL .)
    (               reduce using rule 57 (BinaryOperator -> DIV_EL .)
    ID              reduce using rule 57 (BinaryOperator -> DIV_EL .)
    STRING          reduce using rule 57 (BinaryOperator -> DIV_EL .)
    [               reduce using rule 57 (BinaryOperator -> DIV_EL .)
    EYE             reduce using rule 57 (BinaryOperator -> DIV_EL .)
    ONES            reduce using rule 57 (BinaryOperator -> DIV_EL .)
    ZEROS           reduce using rule 57 (BinaryOperator -> DIV_EL .)
    FLOAT           reduce using rule 57 (BinaryOperator -> DIV_EL .)
    INT             reduce using rule 57 (BinaryOperator -> DIV_EL .)


state 33

    (58) BinaryOperator -> MUL_EL .
    SUB             reduce using rule 58 (BinaryOperator -> MUL_EL .)
    (               reduce using rule 58 (BinaryOperator -> MUL_EL .)
    ID              reduce using rule 58 (BinaryOperator -> MUL_EL .)
    STRING          reduce using rule 58 (BinaryOperator -> MUL_EL .)
    [               reduce using rule 58 (BinaryOperator -> MUL_EL .)
    EYE             reduce using rule 58 (BinaryOperator -> MUL_EL .)
    ONES            reduce using rule 58 (BinaryOperator -> MUL_EL .)
    ZEROS           reduce using rule 58 (BinaryOperator -> MUL_EL .)
    FLOAT           reduce using rule 58 (BinaryOperator -> MUL_EL .)
    INT             reduce using rule 58 (BinaryOperator -> MUL_EL .)


state 34

    (59) BinaryOperator -> SUB_EL .
    SUB             reduce using rule 59 (BinaryOperator -> SUB_EL .)
    (               reduce using rule 59 (BinaryOperator -> SUB_EL .)
    ID              reduce using rule 59 (BinaryOperator -> SUB_EL .)
    STRING          reduce using rule 59 (BinaryOperator -> SUB_EL .)
    [               reduce using rule 59 (BinaryOperator -> SUB_EL .)
    EYE             reduce using rule 59 (BinaryOperator -> SUB_EL .)
    ONES            reduce using rule 59 (BinaryOperator -> SUB_EL .)
    ZEROS           reduce using rule 59 (BinaryOperator -> SUB_EL .)
    FLOAT           reduce using rule 59 (BinaryOperator -> SUB_EL .)
    INT             reduce using rule 59 (BinaryOperator -> SUB_EL .)


state 35

    (60) BinaryOperator -> ADD_EL .
    SUB             reduce using rule 60 (BinaryOperator -> ADD_EL .)
    (               reduce using rule 60 (BinaryOperator -> ADD_EL .)
    ID              reduce using rule 60 (BinaryOperator -> ADD_EL .)
    STRING          reduce using rule 60 (BinaryOperator -> ADD_EL .)
    [               reduce using rule 60 (BinaryOperator -> ADD_EL .)
    EYE             reduce using rule 60 (BinaryOperator -> ADD_EL .)
    ONES            reduce using rule 60 (BinaryOperator -> ADD_EL .)
    ZEROS           reduce using rule 60 (BinaryOperator -> ADD_EL .)
    FLOAT           reduce using rule 60 (BinaryOperator -> ADD_EL .)
    INT             reduce using rule 60 (BinaryOperator -> ADD_EL .)


state 36

    (61) BinaryOperator -> DIV .
    SUB             reduce using rule 61 (BinaryOperator -> DIV .)
    (               reduce using rule 61 (BinaryOperator -> DIV .)
    ID              reduce using rule 61 (BinaryOperator -> DIV .)
    STRING          reduce using rule 61 (BinaryOperator -> DIV .)
    [               reduce using rule 61 (BinaryOperator -> DIV .)
    EYE             reduce using rule 61 (BinaryOperator -> DIV .)
    ONES            reduce using rule 61 (BinaryOperator -> DIV .)
    ZEROS           reduce using rule 61 (BinaryOperator -> DIV .)
    FLOAT           reduce using rule 61 (BinaryOperator -> DIV .)
    INT             reduce using rule 61 (BinaryOperator -> DIV .)


state 37

    (62) BinaryOperator -> MUL .
    SUB             reduce using rule 62 (BinaryOperator -> MUL .)
    (               reduce using rule 62 (BinaryOperator -> MUL .)
    ID              reduce using rule 62 (BinaryOperator -> MUL .)
    STRING          reduce using rule 62 (BinaryOperator -> MUL .)
    [               reduce using rule 62 (BinaryOperator -> MUL .)
    EYE             reduce using rule 62 (BinaryOperator -> MUL .)
    ONES            reduce using rule 62 (BinaryOperator -> MUL .)
    ZEROS           reduce using rule 62 (BinaryOperator -> MUL .)
    FLOAT           reduce using rule 62 (BinaryOperator -> MUL .)
    INT             reduce using rule 62 (BinaryOperator -> MUL .)


state 38

    (63) BinaryOperator -> SUB .
    SUB             reduce using rule 63 (BinaryOperator -> SUB .)
    (               reduce using rule 63 (BinaryOperator -> SUB .)
    ID              reduce using rule 63 (BinaryOperator -> SUB .)
    STRING          reduce using rule 63 (BinaryOperator -> SUB .)
    [               reduce using rule 63 (BinaryOperator -> SUB .)
    EYE             reduce using rule 63 (BinaryOperator -> SUB .)
    ONES            reduce using rule 63 (BinaryOperator -> SUB .)
    ZEROS           reduce using rule 63 (BinaryOperator -> SUB .)
    FLOAT           reduce using rule 63 (BinaryOperator -> SUB .)
    INT             reduce using rule 63 (BinaryOperator -> SUB .)


state 39

    (64) BinaryOperator -> ADD .
    SUB             reduce using rule 64 (BinaryOperator -> ADD .)
    (               reduce using rule 64 (BinaryOperator -> ADD .)
    ID              reduce using rule 64 (BinaryOperator -> ADD .)
    STRING          reduce using rule 64 (BinaryOperator -> ADD .)
    [               reduce using rule 64 (BinaryOperator -> ADD .)
    EYE             reduce using rule 64 (BinaryOperator -> ADD .)
    ONES            reduce using rule 64 (BinaryOperator -> ADD .)
    ZEROS           reduce using rule 64 (BinaryOperator -> ADD .)
    FLOAT           reduce using rule 64 (BinaryOperator -> ADD .)
    INT             reduce using rule 64 (BinaryOperator -> ADD .)


state 40

    (79) ComparisonOperator -> LESS .
    SUB             reduce using rule 79 (ComparisonOperator -> LESS .)
    (               reduce using rule 79 (ComparisonOperator -> LESS .)
    ID              reduce using rule 79 (ComparisonOperator -> LESS .)
    STRING          reduce using rule 79 (ComparisonOperator -> LESS .)
    [               reduce using rule 79 (ComparisonOperator -> LESS .)
    EYE             reduce using rule 79 (ComparisonOperator -> LESS .)
    ONES            reduce using rule 79 (ComparisonOperator -> LESS .)
    ZEROS           reduce using rule 79 (ComparisonOperator -> LESS .)
    FLOAT           reduce using rule 79 (ComparisonOperator -> LESS .)
    INT             reduce using rule 79 (ComparisonOperator -> LESS .)


state 41

    (80) ComparisonOperator -> GREATER .
    SUB             reduce using rule 80 (ComparisonOperator -> GREATER .)
    (               reduce using rule 80 (ComparisonOperator -> GREATER .)
    ID              reduce using rule 80 (ComparisonOperator -> GREATER .)
    STRING          reduce using rule 80 (ComparisonOperator -> GREATER .)
    [               reduce using rule 80 (ComparisonOperator -> GREATER .)
    EYE             reduce using rule 80 (ComparisonOperator -> GREATER .)
    ONES            reduce using rule 80 (ComparisonOperator -> GREATER .)
    ZEROS           reduce using rule 80 (ComparisonOperator -> GREATER .)
    FLOAT           reduce using rule 80 (ComparisonOperator -> GREATER .)
    INT             reduce using rule 80 (ComparisonOperator -> GREATER .)


state 42

    (81) ComparisonOperator -> NOT_EQ .
    SUB             reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    (               reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    ID              reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    STRING          reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    [               reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    EYE             reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    ONES            reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    ZEROS           reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    FLOAT           reduce using rule 81 (ComparisonOperator -> NOT_EQ .)
    INT             reduce using rule 81 (ComparisonOperator -> NOT_EQ .)


state 43

    (82) ComparisonOperator -> GREATER_EQ .
    SUB             reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    (               reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    ID              reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    STRING          reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    [               reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    EYE             reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    ONES            reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    ZEROS           reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    FLOAT           reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)
    INT             reduce using rule 82 (ComparisonOperator -> GREATER_EQ .)


state 44

    (83) ComparisonOperator -> LESS_EQ .
    SUB             reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    (               reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    ID              reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    STRING          reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    [               reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    EYE             reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    ONES            reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    ZEROS           reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    FLOAT           reduce using rule 83 (ComparisonOperator -> LESS_EQ .)
    INT             reduce using rule 83 (ComparisonOperator -> LESS_EQ .)


state 45

    (84) ComparisonOperator -> EQ .
    SUB             reduce using rule 84 (ComparisonOperator -> EQ .)
    (               reduce using rule 84 (ComparisonOperator -> EQ .)
    ID              reduce using rule 84 (ComparisonOperator -> EQ .)
    STRING          reduce using rule 84 (ComparisonOperator -> EQ .)
    [               reduce using rule 84 (ComparisonOperator -> EQ .)
    EYE             reduce using rule 84 (ComparisonOperator -> EQ .)
    ONES            reduce using rule 84 (ComparisonOperator -> EQ .)
    ZEROS           reduce using rule 84 (ComparisonOperator -> EQ .)
    FLOAT           reduce using rule 84 (ComparisonOperator -> EQ .)
    INT             reduce using rule 84 (ComparisonOperator -> EQ .)


state 46

    (65) AssignmentStatement -> ID MatrixAccess . AssignmentOperator Expression
    (67) AssignmentOperator -> . ASS_MUL
    (68) AssignmentOperator -> . ASS_DIV
    (69) AssignmentOperator -> . ASS_SUB
    (70) AssignmentOperator -> . ASS_ADD
    (71) AssignmentOperator -> . ASS
    ASS_MUL         shift and go to state 50
    ASS_DIV         shift and go to state 51
    ASS_SUB         shift and go to state 52
    ASS_ADD         shift and go to state 53
    ASS             shift and go to state 54

    AssignmentOperator             shift and go to state 76

state 47

    (66) AssignmentStatement -> ID AssignmentOperator . Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 77
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 48

    (31) MatrixAccess -> [ . MatrixAccessRange , MatrixAccessRange ]
    (33) MatrixAccessRange -> . MatrixAccessRangeElement
    (34) MatrixAccessRange -> . MatrixAccessRangeElement : MatrixAccessRangeElement
    (35) MatrixAccessRangeElement -> . ID
    (36) MatrixAccessRangeElement -> . INT
    ID              shift and go to state 80
    INT             shift and go to state 81

    MatrixAccessRange              shift and go to state 78
    MatrixAccessRangeElement       shift and go to state 79

state 49

    (32) MatrixAccess -> empty .
    ASS_MUL         reduce using rule 32 (MatrixAccess -> empty .)
    ASS_DIV         reduce using rule 32 (MatrixAccess -> empty .)
    ASS_SUB         reduce using rule 32 (MatrixAccess -> empty .)
    ASS_ADD         reduce using rule 32 (MatrixAccess -> empty .)
    ASS             reduce using rule 32 (MatrixAccess -> empty .)


state 50

    (67) AssignmentOperator -> ASS_MUL .
    SUB             reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    (               reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    ID              reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    STRING          reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    [               reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    EYE             reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    ONES            reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    ZEROS           reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 67 (AssignmentOperator -> ASS_MUL .)
    INT             reduce using rule 67 (AssignmentOperator -> ASS_MUL .)


state 51

    (68) AssignmentOperator -> ASS_DIV .
    SUB             reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    (               reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    ID              reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    STRING          reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    [               reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    EYE             reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    ONES            reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    ZEROS           reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    FLOAT           reduce using rule 68 (AssignmentOperator -> ASS_DIV .)
    INT             reduce using rule 68 (AssignmentOperator -> ASS_DIV .)


state 52

    (69) AssignmentOperator -> ASS_SUB .
    SUB             reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    (               reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    ID              reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    STRING          reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    [               reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    EYE             reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    ONES            reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    ZEROS           reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 69 (AssignmentOperator -> ASS_SUB .)
    INT             reduce using rule 69 (AssignmentOperator -> ASS_SUB .)


state 53

    (70) AssignmentOperator -> ASS_ADD .
    SUB             reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    (               reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    ID              reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    STRING          reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    [               reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    EYE             reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    ONES            reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    ZEROS           reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 70 (AssignmentOperator -> ASS_ADD .)
    INT             reduce using rule 70 (AssignmentOperator -> ASS_ADD .)


state 54

    (71) AssignmentOperator -> ASS .
    SUB             reduce using rule 71 (AssignmentOperator -> ASS .)
    (               reduce using rule 71 (AssignmentOperator -> ASS .)
    ID              reduce using rule 71 (AssignmentOperator -> ASS .)
    STRING          reduce using rule 71 (AssignmentOperator -> ASS .)
    [               reduce using rule 71 (AssignmentOperator -> ASS .)
    EYE             reduce using rule 71 (AssignmentOperator -> ASS .)
    ONES            reduce using rule 71 (AssignmentOperator -> ASS .)
    ZEROS           reduce using rule 71 (AssignmentOperator -> ASS .)
    FLOAT           reduce using rule 71 (AssignmentOperator -> ASS .)
    INT             reduce using rule 71 (AssignmentOperator -> ASS .)


state 55

    (22) PrintStatement -> PRINT Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    ;               reduce using rule 22 (PrintStatement -> PRINT Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 56

    (19) JumpStatement -> RETURN Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    ;               reduce using rule 19 (JumpStatement -> RETURN Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 57

    (16) IterationStatement -> FOR ID . ASS List Statement
    (17) IterationStatement -> FOR ID . ASS Range Statement
    ASS             shift and go to state 82


state 58

    (18) IterationStatement -> WHILE ( . Expression ) Statement
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 83
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 59

    (14) SelectionStatement -> IF ( . Expression ) Statement ELSE Statement
    (15) SelectionStatement -> IF ( . Expression ) Statement
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 84
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 60

    (12) CompoundStatement -> { StatementList . }
    (4) StatementList -> StatementList . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    }               shift and go to state 85
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 4
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 61

    (24) Expression -> PrefixUnaryOperator ( . ComplexExpression ) PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    PrefixUnaryOperator            shift and go to state 23
    ComplexExpression              shift and go to state 86
    Expression                     shift and go to state 87
    empty                          shift and go to state 24

state 62

    (25) Expression -> PrefixUnaryOperator SimpleExpression . PostfixUnaryOperator
    (74) PostfixUnaryOperator -> . empty
    (75) PostfixUnaryOperator -> . MatrixAccess
    (76) PostfixUnaryOperator -> . MAT_TRANS
    (2) empty -> .
    (31) MatrixAccess -> . [ MatrixAccessRange , MatrixAccessRange ]
    (32) MatrixAccess -> . empty
    MAT_TRANS       shift and go to state 91
    DIV_EL          reduce using rule 2 (empty -> .)
    MUL_EL          reduce using rule 2 (empty -> .)
    SUB_EL          reduce using rule 2 (empty -> .)
    ADD_EL          reduce using rule 2 (empty -> .)
    DIV             reduce using rule 2 (empty -> .)
    MUL             reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    ADD             reduce using rule 2 (empty -> .)
    LESS            reduce using rule 2 (empty -> .)
    GREATER         reduce using rule 2 (empty -> .)
    NOT_EQ          reduce using rule 2 (empty -> .)
    GREATER_EQ      reduce using rule 2 (empty -> .)
    LESS_EQ         reduce using rule 2 (empty -> .)
    EQ              reduce using rule 2 (empty -> .)
    ;               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    [               shift and go to state 48

    PostfixUnaryOperator           shift and go to state 88
    empty                          shift and go to state 89
    MatrixAccess                   shift and go to state 90

state 63

    (28) SimpleExpression -> ID .
    MAT_TRANS       reduce using rule 28 (SimpleExpression -> ID .)
    [               reduce using rule 28 (SimpleExpression -> ID .)
    DIV_EL          reduce using rule 28 (SimpleExpression -> ID .)
    MUL_EL          reduce using rule 28 (SimpleExpression -> ID .)
    SUB_EL          reduce using rule 28 (SimpleExpression -> ID .)
    ADD_EL          reduce using rule 28 (SimpleExpression -> ID .)
    DIV             reduce using rule 28 (SimpleExpression -> ID .)
    MUL             reduce using rule 28 (SimpleExpression -> ID .)
    SUB             reduce using rule 28 (SimpleExpression -> ID .)
    ADD             reduce using rule 28 (SimpleExpression -> ID .)
    LESS            reduce using rule 28 (SimpleExpression -> ID .)
    GREATER         reduce using rule 28 (SimpleExpression -> ID .)
    NOT_EQ          reduce using rule 28 (SimpleExpression -> ID .)
    GREATER_EQ      reduce using rule 28 (SimpleExpression -> ID .)
    LESS_EQ         reduce using rule 28 (SimpleExpression -> ID .)
    EQ              reduce using rule 28 (SimpleExpression -> ID .)
    ;               reduce using rule 28 (SimpleExpression -> ID .)
    )               reduce using rule 28 (SimpleExpression -> ID .)


state 64

    (29) SimpleExpression -> Primitive .
    MAT_TRANS       reduce using rule 29 (SimpleExpression -> Primitive .)
    [               reduce using rule 29 (SimpleExpression -> Primitive .)
    DIV_EL          reduce using rule 29 (SimpleExpression -> Primitive .)
    MUL_EL          reduce using rule 29 (SimpleExpression -> Primitive .)
    SUB_EL          reduce using rule 29 (SimpleExpression -> Primitive .)
    ADD_EL          reduce using rule 29 (SimpleExpression -> Primitive .)
    DIV             reduce using rule 29 (SimpleExpression -> Primitive .)
    MUL             reduce using rule 29 (SimpleExpression -> Primitive .)
    SUB             reduce using rule 29 (SimpleExpression -> Primitive .)
    ADD             reduce using rule 29 (SimpleExpression -> Primitive .)
    LESS            reduce using rule 29 (SimpleExpression -> Primitive .)
    GREATER         reduce using rule 29 (SimpleExpression -> Primitive .)
    NOT_EQ          reduce using rule 29 (SimpleExpression -> Primitive .)
    GREATER_EQ      reduce using rule 29 (SimpleExpression -> Primitive .)
    LESS_EQ         reduce using rule 29 (SimpleExpression -> Primitive .)
    EQ              reduce using rule 29 (SimpleExpression -> Primitive .)
    ;               reduce using rule 29 (SimpleExpression -> Primitive .)
    )               reduce using rule 29 (SimpleExpression -> Primitive .)


state 65

    (30) SimpleExpression -> Matrix .
    MAT_TRANS       reduce using rule 30 (SimpleExpression -> Matrix .)
    [               reduce using rule 30 (SimpleExpression -> Matrix .)
    DIV_EL          reduce using rule 30 (SimpleExpression -> Matrix .)
    MUL_EL          reduce using rule 30 (SimpleExpression -> Matrix .)
    SUB_EL          reduce using rule 30 (SimpleExpression -> Matrix .)
    ADD_EL          reduce using rule 30 (SimpleExpression -> Matrix .)
    DIV             reduce using rule 30 (SimpleExpression -> Matrix .)
    MUL             reduce using rule 30 (SimpleExpression -> Matrix .)
    SUB             reduce using rule 30 (SimpleExpression -> Matrix .)
    ADD             reduce using rule 30 (SimpleExpression -> Matrix .)
    LESS            reduce using rule 30 (SimpleExpression -> Matrix .)
    GREATER         reduce using rule 30 (SimpleExpression -> Matrix .)
    NOT_EQ          reduce using rule 30 (SimpleExpression -> Matrix .)
    GREATER_EQ      reduce using rule 30 (SimpleExpression -> Matrix .)
    LESS_EQ         reduce using rule 30 (SimpleExpression -> Matrix .)
    EQ              reduce using rule 30 (SimpleExpression -> Matrix .)
    ;               reduce using rule 30 (SimpleExpression -> Matrix .)
    )               reduce using rule 30 (SimpleExpression -> Matrix .)


state 66

    (47) Primitive -> STRING .
    MAT_TRANS       reduce using rule 47 (Primitive -> STRING .)
    [               reduce using rule 47 (Primitive -> STRING .)
    DIV_EL          reduce using rule 47 (Primitive -> STRING .)
    MUL_EL          reduce using rule 47 (Primitive -> STRING .)
    SUB_EL          reduce using rule 47 (Primitive -> STRING .)
    ADD_EL          reduce using rule 47 (Primitive -> STRING .)
    DIV             reduce using rule 47 (Primitive -> STRING .)
    MUL             reduce using rule 47 (Primitive -> STRING .)
    SUB             reduce using rule 47 (Primitive -> STRING .)
    ADD             reduce using rule 47 (Primitive -> STRING .)
    LESS            reduce using rule 47 (Primitive -> STRING .)
    GREATER         reduce using rule 47 (Primitive -> STRING .)
    NOT_EQ          reduce using rule 47 (Primitive -> STRING .)
    GREATER_EQ      reduce using rule 47 (Primitive -> STRING .)
    LESS_EQ         reduce using rule 47 (Primitive -> STRING .)
    EQ              reduce using rule 47 (Primitive -> STRING .)
    ;               reduce using rule 47 (Primitive -> STRING .)
    )               reduce using rule 47 (Primitive -> STRING .)
    ,               reduce using rule 47 (Primitive -> STRING .)


state 67

    (48) Primitive -> Number .
    MAT_TRANS       reduce using rule 48 (Primitive -> Number .)
    [               reduce using rule 48 (Primitive -> Number .)
    DIV_EL          reduce using rule 48 (Primitive -> Number .)
    MUL_EL          reduce using rule 48 (Primitive -> Number .)
    SUB_EL          reduce using rule 48 (Primitive -> Number .)
    ADD_EL          reduce using rule 48 (Primitive -> Number .)
    DIV             reduce using rule 48 (Primitive -> Number .)
    MUL             reduce using rule 48 (Primitive -> Number .)
    SUB             reduce using rule 48 (Primitive -> Number .)
    ADD             reduce using rule 48 (Primitive -> Number .)
    LESS            reduce using rule 48 (Primitive -> Number .)
    GREATER         reduce using rule 48 (Primitive -> Number .)
    NOT_EQ          reduce using rule 48 (Primitive -> Number .)
    GREATER_EQ      reduce using rule 48 (Primitive -> Number .)
    LESS_EQ         reduce using rule 48 (Primitive -> Number .)
    EQ              reduce using rule 48 (Primitive -> Number .)
    ;               reduce using rule 48 (Primitive -> Number .)
    )               reduce using rule 48 (Primitive -> Number .)
    ,               reduce using rule 48 (Primitive -> Number .)


state 68

    (49) Matrix -> [ . MatrixRowList ]
    (53) MatrixRowList -> . empty
    (54) MatrixRowList -> . [ MatrixRow ] , MatrixRowList
    (2) empty -> .
    [               shift and go to state 92
    ]               reduce using rule 2 (empty -> .)

    MatrixRowList                  shift and go to state 93
    empty                          shift and go to state 94

state 69

    (50) Matrix -> EYE . ( INT )
    (               shift and go to state 95


state 70

    (78) Number -> INT .
    MAT_TRANS       reduce using rule 78 (Number -> INT .)
    [               reduce using rule 78 (Number -> INT .)
    DIV_EL          reduce using rule 78 (Number -> INT .)
    MUL_EL          reduce using rule 78 (Number -> INT .)
    SUB_EL          reduce using rule 78 (Number -> INT .)
    ADD_EL          reduce using rule 78 (Number -> INT .)
    DIV             reduce using rule 78 (Number -> INT .)
    MUL             reduce using rule 78 (Number -> INT .)
    SUB             reduce using rule 78 (Number -> INT .)
    ADD             reduce using rule 78 (Number -> INT .)
    LESS            reduce using rule 78 (Number -> INT .)
    GREATER         reduce using rule 78 (Number -> INT .)
    NOT_EQ          reduce using rule 78 (Number -> INT .)
    GREATER_EQ      reduce using rule 78 (Number -> INT .)
    LESS_EQ         reduce using rule 78 (Number -> INT .)
    EQ              reduce using rule 78 (Number -> INT .)
    ;               reduce using rule 78 (Number -> INT .)
    )               reduce using rule 78 (Number -> INT .)
    :               reduce using rule 78 (Number -> INT .)
    ,               reduce using rule 78 (Number -> INT .)
    ID              reduce using rule 78 (Number -> INT .)
    PRINT           reduce using rule 78 (Number -> INT .)
    RETURN          reduce using rule 78 (Number -> INT .)
    CONTINUE        reduce using rule 78 (Number -> INT .)
    BREAK           reduce using rule 78 (Number -> INT .)
    FOR             reduce using rule 78 (Number -> INT .)
    WHILE           reduce using rule 78 (Number -> INT .)
    IF              reduce using rule 78 (Number -> INT .)
    {               reduce using rule 78 (Number -> INT .)
    (               reduce using rule 78 (Number -> INT .)
    STRING          reduce using rule 78 (Number -> INT .)
    EYE             reduce using rule 78 (Number -> INT .)
    ONES            reduce using rule 78 (Number -> INT .)
    ZEROS           reduce using rule 78 (Number -> INT .)
    FLOAT           reduce using rule 78 (Number -> INT .)
    INT             reduce using rule 78 (Number -> INT .)


state 71

    (51) Matrix -> ONES . ( INT )
    (               shift and go to state 96


state 72

    (52) Matrix -> ZEROS . ( INT )
    (               shift and go to state 97


state 73

    (77) Number -> FLOAT .
    MAT_TRANS       reduce using rule 77 (Number -> FLOAT .)
    [               reduce using rule 77 (Number -> FLOAT .)
    DIV_EL          reduce using rule 77 (Number -> FLOAT .)
    MUL_EL          reduce using rule 77 (Number -> FLOAT .)
    SUB_EL          reduce using rule 77 (Number -> FLOAT .)
    ADD_EL          reduce using rule 77 (Number -> FLOAT .)
    DIV             reduce using rule 77 (Number -> FLOAT .)
    MUL             reduce using rule 77 (Number -> FLOAT .)
    SUB             reduce using rule 77 (Number -> FLOAT .)
    ADD             reduce using rule 77 (Number -> FLOAT .)
    LESS            reduce using rule 77 (Number -> FLOAT .)
    GREATER         reduce using rule 77 (Number -> FLOAT .)
    NOT_EQ          reduce using rule 77 (Number -> FLOAT .)
    GREATER_EQ      reduce using rule 77 (Number -> FLOAT .)
    LESS_EQ         reduce using rule 77 (Number -> FLOAT .)
    EQ              reduce using rule 77 (Number -> FLOAT .)
    ;               reduce using rule 77 (Number -> FLOAT .)
    )               reduce using rule 77 (Number -> FLOAT .)
    :               reduce using rule 77 (Number -> FLOAT .)
    ,               reduce using rule 77 (Number -> FLOAT .)
    ID              reduce using rule 77 (Number -> FLOAT .)
    PRINT           reduce using rule 77 (Number -> FLOAT .)
    RETURN          reduce using rule 77 (Number -> FLOAT .)
    CONTINUE        reduce using rule 77 (Number -> FLOAT .)
    BREAK           reduce using rule 77 (Number -> FLOAT .)
    FOR             reduce using rule 77 (Number -> FLOAT .)
    WHILE           reduce using rule 77 (Number -> FLOAT .)
    IF              reduce using rule 77 (Number -> FLOAT .)
    {               reduce using rule 77 (Number -> FLOAT .)
    (               reduce using rule 77 (Number -> FLOAT .)
    STRING          reduce using rule 77 (Number -> FLOAT .)
    EYE             reduce using rule 77 (Number -> FLOAT .)
    ONES            reduce using rule 77 (Number -> FLOAT .)
    ZEROS           reduce using rule 77 (Number -> FLOAT .)
    FLOAT           reduce using rule 77 (Number -> FLOAT .)
    INT             reduce using rule 77 (Number -> FLOAT .)


state 74

    (26) ComplexExpression -> Expression BinaryOperator Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
  ! shift/reduce conflict for DIV_EL resolved as shift
  ! shift/reduce conflict for MUL_EL resolved as shift
  ! shift/reduce conflict for SUB_EL resolved as shift
  ! shift/reduce conflict for ADD_EL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    ;               reduce using rule 26 (ComplexExpression -> Expression BinaryOperator Expression .)
    )               reduce using rule 26 (ComplexExpression -> Expression BinaryOperator Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 75

    (27) ComplexExpression -> Expression ComparisonOperator Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
  ! shift/reduce conflict for DIV_EL resolved as shift
  ! shift/reduce conflict for MUL_EL resolved as shift
  ! shift/reduce conflict for SUB_EL resolved as shift
  ! shift/reduce conflict for ADD_EL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    ;               reduce using rule 27 (ComplexExpression -> Expression ComparisonOperator Expression .)
    )               reduce using rule 27 (ComplexExpression -> Expression ComparisonOperator Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    ComparisonOperator             shift and go to state 31
    BinaryOperator                 shift and go to state 30

state 76

    (65) AssignmentStatement -> ID MatrixAccess AssignmentOperator . Expression
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    ID              reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 98
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 77

    (66) AssignmentStatement -> ID AssignmentOperator Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    ;               reduce using rule 66 (AssignmentStatement -> ID AssignmentOperator Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 78

    (31) MatrixAccess -> [ MatrixAccessRange . , MatrixAccessRange ]
    ,               shift and go to state 99


state 79

    (33) MatrixAccessRange -> MatrixAccessRangeElement .
    (34) MatrixAccessRange -> MatrixAccessRangeElement . : MatrixAccessRangeElement
    ,               reduce using rule 33 (MatrixAccessRange -> MatrixAccessRangeElement .)
    ]               reduce using rule 33 (MatrixAccessRange -> MatrixAccessRangeElement .)
    :               shift and go to state 100


state 80

    (35) MatrixAccessRangeElement -> ID .
    :               reduce using rule 35 (MatrixAccessRangeElement -> ID .)
    ,               reduce using rule 35 (MatrixAccessRangeElement -> ID .)
    ]               reduce using rule 35 (MatrixAccessRangeElement -> ID .)


state 81

    (36) MatrixAccessRangeElement -> INT .
    :               reduce using rule 36 (MatrixAccessRangeElement -> INT .)
    ,               reduce using rule 36 (MatrixAccessRangeElement -> INT .)
    ]               reduce using rule 36 (MatrixAccessRangeElement -> INT .)


state 82

    (16) IterationStatement -> FOR ID ASS . List Statement
    (17) IterationStatement -> FOR ID ASS . Range Statement
    (41) List -> . [ ListContent ]
    (37) Range -> . RangeElement : RangeElement : RangeElement
    (38) Range -> . RangeElement : RangeElement
    (39) RangeElement -> . ID
    (40) RangeElement -> . Number
    (77) Number -> . FLOAT
    (78) Number -> . INT
    [               shift and go to state 104
    ID              shift and go to state 101
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    List                           shift and go to state 102
    Range                          shift and go to state 103
    RangeElement                   shift and go to state 105
    Number                         shift and go to state 106

state 83

    (18) IterationStatement -> WHILE ( Expression . ) Statement
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    )               shift and go to state 107
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 84

    (14) SelectionStatement -> IF ( Expression . ) Statement ELSE Statement
    (15) SelectionStatement -> IF ( Expression . ) Statement
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    )               shift and go to state 108
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 85

    (12) CompoundStatement -> { StatementList } .
    ID              reduce using rule 12 (CompoundStatement -> { StatementList } .)
    PRINT           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    RETURN          reduce using rule 12 (CompoundStatement -> { StatementList } .)
    CONTINUE        reduce using rule 12 (CompoundStatement -> { StatementList } .)
    BREAK           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    FOR             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    WHILE           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    IF              reduce using rule 12 (CompoundStatement -> { StatementList } .)
    {               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    SUB             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    (               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    STRING          reduce using rule 12 (CompoundStatement -> { StatementList } .)
    [               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    EYE             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    ONES            reduce using rule 12 (CompoundStatement -> { StatementList } .)
    ZEROS           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    FLOAT           reduce using rule 12 (CompoundStatement -> { StatementList } .)
    INT             reduce using rule 12 (CompoundStatement -> { StatementList } .)
    $end            reduce using rule 12 (CompoundStatement -> { StatementList } .)
    }               reduce using rule 12 (CompoundStatement -> { StatementList } .)
    ELSE            reduce using rule 12 (CompoundStatement -> { StatementList } .)


state 86

    (24) Expression -> PrefixUnaryOperator ( ComplexExpression . ) PostfixUnaryOperator
    (23) Expression -> ComplexExpression .
    )               shift and go to state 109
    DIV_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    MUL_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    SUB_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    ADD_EL          reduce using rule 23 (Expression -> ComplexExpression .)
    DIV             reduce using rule 23 (Expression -> ComplexExpression .)
    MUL             reduce using rule 23 (Expression -> ComplexExpression .)
    SUB             reduce using rule 23 (Expression -> ComplexExpression .)
    ADD             reduce using rule 23 (Expression -> ComplexExpression .)
    LESS            reduce using rule 23 (Expression -> ComplexExpression .)
    GREATER         reduce using rule 23 (Expression -> ComplexExpression .)
    NOT_EQ          reduce using rule 23 (Expression -> ComplexExpression .)
    GREATER_EQ      reduce using rule 23 (Expression -> ComplexExpression .)
    LESS_EQ         reduce using rule 23 (Expression -> ComplexExpression .)
    EQ              reduce using rule 23 (Expression -> ComplexExpression .)


state 87

    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 88

    (25) Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .
    DIV_EL          reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    MUL_EL          reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    SUB_EL          reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    ADD_EL          reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    DIV             reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    MUL             reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    SUB             reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    ADD             reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    LESS            reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    GREATER         reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    NOT_EQ          reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    GREATER_EQ      reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    LESS_EQ         reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    EQ              reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    ;               reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)
    )               reduce using rule 25 (Expression -> PrefixUnaryOperator SimpleExpression PostfixUnaryOperator .)


state 89

    (74) PostfixUnaryOperator -> empty .
    (32) MatrixAccess -> empty .
  ! reduce/reduce conflict for DIV_EL resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for MUL_EL resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for SUB_EL resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for ADD_EL resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for DIV resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for MUL resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for SUB resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for ADD resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for LESS resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for GREATER resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for EQ resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for ; resolved using rule 32 (MatrixAccess -> empty .)
  ! reduce/reduce conflict for ) resolved using rule 32 (MatrixAccess -> empty .)
    DIV_EL          reduce using rule 32 (MatrixAccess -> empty .)
    MUL_EL          reduce using rule 32 (MatrixAccess -> empty .)
    SUB_EL          reduce using rule 32 (MatrixAccess -> empty .)
    ADD_EL          reduce using rule 32 (MatrixAccess -> empty .)
    DIV             reduce using rule 32 (MatrixAccess -> empty .)
    MUL             reduce using rule 32 (MatrixAccess -> empty .)
    SUB             reduce using rule 32 (MatrixAccess -> empty .)
    ADD             reduce using rule 32 (MatrixAccess -> empty .)
    LESS            reduce using rule 32 (MatrixAccess -> empty .)
    GREATER         reduce using rule 32 (MatrixAccess -> empty .)
    NOT_EQ          reduce using rule 32 (MatrixAccess -> empty .)
    GREATER_EQ      reduce using rule 32 (MatrixAccess -> empty .)
    LESS_EQ         reduce using rule 32 (MatrixAccess -> empty .)
    EQ              reduce using rule 32 (MatrixAccess -> empty .)
    ;               reduce using rule 32 (MatrixAccess -> empty .)
    )               reduce using rule 32 (MatrixAccess -> empty .)


state 90

    (75) PostfixUnaryOperator -> MatrixAccess .
    DIV_EL          reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    MUL_EL          reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    SUB_EL          reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    ADD_EL          reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    DIV             reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    MUL             reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    SUB             reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    ADD             reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    LESS            reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    GREATER         reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    NOT_EQ          reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    GREATER_EQ      reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    LESS_EQ         reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    EQ              reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    ;               reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)
    )               reduce using rule 75 (PostfixUnaryOperator -> MatrixAccess .)


state 91

    (76) PostfixUnaryOperator -> MAT_TRANS .
    DIV_EL          reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    MUL_EL          reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    SUB_EL          reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    ADD_EL          reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    DIV             reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    MUL             reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    SUB             reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    ADD             reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    LESS            reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    GREATER         reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    NOT_EQ          reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    GREATER_EQ      reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    LESS_EQ         reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    EQ              reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    ;               reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)
    )               reduce using rule 76 (PostfixUnaryOperator -> MAT_TRANS .)


state 92

    (54) MatrixRowList -> [ . MatrixRow ] , MatrixRowList
    (55) MatrixRow -> . empty
    (56) MatrixRow -> . Number , MatrixRow
    (2) empty -> .
    (77) Number -> . FLOAT
    (78) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    MatrixRow                      shift and go to state 110
    empty                          shift and go to state 111
    Number                         shift and go to state 112

state 93

    (49) Matrix -> [ MatrixRowList . ]
    ]               shift and go to state 113


state 94

    (53) MatrixRowList -> empty .
    ]               reduce using rule 53 (MatrixRowList -> empty .)


state 95

    (50) Matrix -> EYE ( . INT )
    INT             shift and go to state 114


state 96

    (51) Matrix -> ONES ( . INT )
    INT             shift and go to state 115


state 97

    (52) Matrix -> ZEROS ( . INT )
    INT             shift and go to state 116


state 98

    (65) AssignmentStatement -> ID MatrixAccess AssignmentOperator Expression .
    (26) ComplexExpression -> Expression . BinaryOperator Expression
    (27) ComplexExpression -> Expression . ComparisonOperator Expression
    (57) BinaryOperator -> . DIV_EL
    (58) BinaryOperator -> . MUL_EL
    (59) BinaryOperator -> . SUB_EL
    (60) BinaryOperator -> . ADD_EL
    (61) BinaryOperator -> . DIV
    (62) BinaryOperator -> . MUL
    (63) BinaryOperator -> . SUB
    (64) BinaryOperator -> . ADD
    (79) ComparisonOperator -> . LESS
    (80) ComparisonOperator -> . GREATER
    (81) ComparisonOperator -> . NOT_EQ
    (82) ComparisonOperator -> . GREATER_EQ
    (83) ComparisonOperator -> . LESS_EQ
    (84) ComparisonOperator -> . EQ
    ;               reduce using rule 65 (AssignmentStatement -> ID MatrixAccess AssignmentOperator Expression .)
    DIV_EL          shift and go to state 32
    MUL_EL          shift and go to state 33
    SUB_EL          shift and go to state 34
    ADD_EL          shift and go to state 35
    DIV             shift and go to state 36
    MUL             shift and go to state 37
    SUB             shift and go to state 38
    ADD             shift and go to state 39
    LESS            shift and go to state 40
    GREATER         shift and go to state 41
    NOT_EQ          shift and go to state 42
    GREATER_EQ      shift and go to state 43
    LESS_EQ         shift and go to state 44
    EQ              shift and go to state 45

    BinaryOperator                 shift and go to state 30
    ComparisonOperator             shift and go to state 31

state 99

    (31) MatrixAccess -> [ MatrixAccessRange , . MatrixAccessRange ]
    (33) MatrixAccessRange -> . MatrixAccessRangeElement
    (34) MatrixAccessRange -> . MatrixAccessRangeElement : MatrixAccessRangeElement
    (35) MatrixAccessRangeElement -> . ID
    (36) MatrixAccessRangeElement -> . INT
    ID              shift and go to state 80
    INT             shift and go to state 81

    MatrixAccessRange              shift and go to state 117
    MatrixAccessRangeElement       shift and go to state 79

state 100

    (34) MatrixAccessRange -> MatrixAccessRangeElement : . MatrixAccessRangeElement
    (35) MatrixAccessRangeElement -> . ID
    (36) MatrixAccessRangeElement -> . INT
    ID              shift and go to state 80
    INT             shift and go to state 81

    MatrixAccessRangeElement       shift and go to state 118

state 101

    (39) RangeElement -> ID .
    :               reduce using rule 39 (RangeElement -> ID .)
    ID              reduce using rule 39 (RangeElement -> ID .)
    PRINT           reduce using rule 39 (RangeElement -> ID .)
    RETURN          reduce using rule 39 (RangeElement -> ID .)
    CONTINUE        reduce using rule 39 (RangeElement -> ID .)
    BREAK           reduce using rule 39 (RangeElement -> ID .)
    FOR             reduce using rule 39 (RangeElement -> ID .)
    WHILE           reduce using rule 39 (RangeElement -> ID .)
    IF              reduce using rule 39 (RangeElement -> ID .)
    {               reduce using rule 39 (RangeElement -> ID .)
    SUB             reduce using rule 39 (RangeElement -> ID .)
    (               reduce using rule 39 (RangeElement -> ID .)
    STRING          reduce using rule 39 (RangeElement -> ID .)
    [               reduce using rule 39 (RangeElement -> ID .)
    EYE             reduce using rule 39 (RangeElement -> ID .)
    ONES            reduce using rule 39 (RangeElement -> ID .)
    ZEROS           reduce using rule 39 (RangeElement -> ID .)
    FLOAT           reduce using rule 39 (RangeElement -> ID .)
    INT             reduce using rule 39 (RangeElement -> ID .)


state 102

    (16) IterationStatement -> FOR ID ASS List . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 119
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 103

    (17) IterationStatement -> FOR ID ASS Range . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Statement                      shift and go to state 120
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    Expression                     shift and go to state 12
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 104

    (41) List -> [ . ListContent ]
    (42) ListContent -> . empty
    (43) ListContent -> . ListEl , ListContent
    (2) empty -> .
    (44) ListEl -> . List
    (45) ListEl -> . Primitive
    (46) ListEl -> . ID
    (41) List -> . [ ListContent ]
    (47) Primitive -> . STRING
    (48) Primitive -> . Number
    (77) Number -> . FLOAT
    (78) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    ID              shift and go to state 126
    [               shift and go to state 104
    STRING          shift and go to state 66
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    ListContent                    shift and go to state 121
    empty                          shift and go to state 122
    ListEl                         shift and go to state 123
    List                           shift and go to state 124
    Primitive                      shift and go to state 125
    Number                         shift and go to state 67

state 105

    (37) Range -> RangeElement . : RangeElement : RangeElement
    (38) Range -> RangeElement . : RangeElement
    :               shift and go to state 127


state 106

    (40) RangeElement -> Number .
    :               reduce using rule 40 (RangeElement -> Number .)
    ID              reduce using rule 40 (RangeElement -> Number .)
    PRINT           reduce using rule 40 (RangeElement -> Number .)
    RETURN          reduce using rule 40 (RangeElement -> Number .)
    CONTINUE        reduce using rule 40 (RangeElement -> Number .)
    BREAK           reduce using rule 40 (RangeElement -> Number .)
    FOR             reduce using rule 40 (RangeElement -> Number .)
    WHILE           reduce using rule 40 (RangeElement -> Number .)
    IF              reduce using rule 40 (RangeElement -> Number .)
    {               reduce using rule 40 (RangeElement -> Number .)
    SUB             reduce using rule 40 (RangeElement -> Number .)
    (               reduce using rule 40 (RangeElement -> Number .)
    STRING          reduce using rule 40 (RangeElement -> Number .)
    [               reduce using rule 40 (RangeElement -> Number .)
    EYE             reduce using rule 40 (RangeElement -> Number .)
    ONES            reduce using rule 40 (RangeElement -> Number .)
    ZEROS           reduce using rule 40 (RangeElement -> Number .)
    FLOAT           reduce using rule 40 (RangeElement -> Number .)
    INT             reduce using rule 40 (RangeElement -> Number .)


state 107

    (18) IterationStatement -> WHILE ( Expression ) . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 12
    Statement                      shift and go to state 128
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 108

    (14) SelectionStatement -> IF ( Expression ) . Statement ELSE Statement
    (15) SelectionStatement -> IF ( Expression ) . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 12
    Statement                      shift and go to state 129
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 109

    (24) Expression -> PrefixUnaryOperator ( ComplexExpression ) . PostfixUnaryOperator
    (74) PostfixUnaryOperator -> . empty
    (75) PostfixUnaryOperator -> . MatrixAccess
    (76) PostfixUnaryOperator -> . MAT_TRANS
    (2) empty -> .
    (31) MatrixAccess -> . [ MatrixAccessRange , MatrixAccessRange ]
    (32) MatrixAccess -> . empty
    MAT_TRANS       shift and go to state 91
    DIV_EL          reduce using rule 2 (empty -> .)
    MUL_EL          reduce using rule 2 (empty -> .)
    SUB_EL          reduce using rule 2 (empty -> .)
    ADD_EL          reduce using rule 2 (empty -> .)
    DIV             reduce using rule 2 (empty -> .)
    MUL             reduce using rule 2 (empty -> .)
    SUB             reduce using rule 2 (empty -> .)
    ADD             reduce using rule 2 (empty -> .)
    LESS            reduce using rule 2 (empty -> .)
    GREATER         reduce using rule 2 (empty -> .)
    NOT_EQ          reduce using rule 2 (empty -> .)
    GREATER_EQ      reduce using rule 2 (empty -> .)
    LESS_EQ         reduce using rule 2 (empty -> .)
    EQ              reduce using rule 2 (empty -> .)
    ;               reduce using rule 2 (empty -> .)
    )               reduce using rule 2 (empty -> .)
    [               shift and go to state 48

    PostfixUnaryOperator           shift and go to state 130
    empty                          shift and go to state 89
    MatrixAccess                   shift and go to state 90

state 110

    (54) MatrixRowList -> [ MatrixRow . ] , MatrixRowList
    ]               shift and go to state 131


state 111

    (55) MatrixRow -> empty .
    ]               reduce using rule 55 (MatrixRow -> empty .)


state 112

    (56) MatrixRow -> Number . , MatrixRow
    ,               shift and go to state 132


state 113

    (49) Matrix -> [ MatrixRowList ] .
    MAT_TRANS       reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    [               reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    DIV_EL          reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    MUL_EL          reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    SUB_EL          reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    ADD_EL          reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    DIV             reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    MUL             reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    SUB             reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    ADD             reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    LESS            reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    GREATER         reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    NOT_EQ          reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    GREATER_EQ      reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    LESS_EQ         reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    EQ              reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    ;               reduce using rule 49 (Matrix -> [ MatrixRowList ] .)
    )               reduce using rule 49 (Matrix -> [ MatrixRowList ] .)


state 114

    (50) Matrix -> EYE ( INT . )
    )               shift and go to state 133


state 115

    (51) Matrix -> ONES ( INT . )
    )               shift and go to state 134


state 116

    (52) Matrix -> ZEROS ( INT . )
    )               shift and go to state 135


state 117

    (31) MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange . ]
    ]               shift and go to state 136


state 118

    (34) MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement .
    ,               reduce using rule 34 (MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement .)
    ]               reduce using rule 34 (MatrixAccessRange -> MatrixAccessRangeElement : MatrixAccessRangeElement .)


state 119

    (16) IterationStatement -> FOR ID ASS List Statement .
    ID              reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    PRINT           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    RETURN          reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    CONTINUE        reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    BREAK           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    FOR             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    WHILE           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    IF              reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    {               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    SUB             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    (               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    STRING          reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    [               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    EYE             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    ONES            reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    ZEROS           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    FLOAT           reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    INT             reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    $end            reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    }               reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)
    ELSE            reduce using rule 16 (IterationStatement -> FOR ID ASS List Statement .)


state 120

    (17) IterationStatement -> FOR ID ASS Range Statement .
    ID              reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    PRINT           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    RETURN          reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    CONTINUE        reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    BREAK           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    FOR             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    WHILE           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    IF              reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    {               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    SUB             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    (               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    STRING          reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    [               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    EYE             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    ONES            reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    ZEROS           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    FLOAT           reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    INT             reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    $end            reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    }               reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)
    ELSE            reduce using rule 17 (IterationStatement -> FOR ID ASS Range Statement .)


state 121

    (41) List -> [ ListContent . ]
    ]               shift and go to state 137


state 122

    (42) ListContent -> empty .
    ]               reduce using rule 42 (ListContent -> empty .)


state 123

    (43) ListContent -> ListEl . , ListContent
    ,               shift and go to state 138


state 124

    (44) ListEl -> List .
    ,               reduce using rule 44 (ListEl -> List .)


state 125

    (45) ListEl -> Primitive .
    ,               reduce using rule 45 (ListEl -> Primitive .)


state 126

    (46) ListEl -> ID .
    ,               reduce using rule 46 (ListEl -> ID .)


state 127

    (37) Range -> RangeElement : . RangeElement : RangeElement
    (38) Range -> RangeElement : . RangeElement
    (39) RangeElement -> . ID
    (40) RangeElement -> . Number
    (77) Number -> . FLOAT
    (78) Number -> . INT
    ID              shift and go to state 101
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    RangeElement                   shift and go to state 139
    Number                         shift and go to state 106

state 128

    (18) IterationStatement -> WHILE ( Expression ) Statement .
    ID              reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    PRINT           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    CONTINUE        reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    BREAK           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    SUB             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    (               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    STRING          reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    [               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    EYE             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    ONES            reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    ZEROS           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    FLOAT           reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    INT             reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    $end            reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    }               reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 18 (IterationStatement -> WHILE ( Expression ) Statement .)


state 129

    (14) SelectionStatement -> IF ( Expression ) Statement . ELSE Statement
    (15) SelectionStatement -> IF ( Expression ) Statement .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 140
    ID              reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    PRINT           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    RETURN          reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    CONTINUE        reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    BREAK           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    FOR             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    WHILE           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    IF              reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    {               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    SUB             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    (               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    STRING          reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    [               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    EYE             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    ONES            reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    ZEROS           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    FLOAT           reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    INT             reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    $end            reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)
    }               reduce using rule 15 (SelectionStatement -> IF ( Expression ) Statement .)


state 130

    (24) Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .
    DIV_EL          reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    MUL_EL          reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    SUB_EL          reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    ADD_EL          reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    DIV             reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    MUL             reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    SUB             reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    ADD             reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    LESS            reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    GREATER         reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    NOT_EQ          reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    GREATER_EQ      reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    LESS_EQ         reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    EQ              reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    ;               reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)
    )               reduce using rule 24 (Expression -> PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator .)


state 131

    (54) MatrixRowList -> [ MatrixRow ] . , MatrixRowList
    ,               shift and go to state 141


state 132

    (56) MatrixRow -> Number , . MatrixRow
    (55) MatrixRow -> . empty
    (56) MatrixRow -> . Number , MatrixRow
    (2) empty -> .
    (77) Number -> . FLOAT
    (78) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    Number                         shift and go to state 112
    MatrixRow                      shift and go to state 142
    empty                          shift and go to state 111

state 133

    (50) Matrix -> EYE ( INT ) .
    MAT_TRANS       reduce using rule 50 (Matrix -> EYE ( INT ) .)
    [               reduce using rule 50 (Matrix -> EYE ( INT ) .)
    DIV_EL          reduce using rule 50 (Matrix -> EYE ( INT ) .)
    MUL_EL          reduce using rule 50 (Matrix -> EYE ( INT ) .)
    SUB_EL          reduce using rule 50 (Matrix -> EYE ( INT ) .)
    ADD_EL          reduce using rule 50 (Matrix -> EYE ( INT ) .)
    DIV             reduce using rule 50 (Matrix -> EYE ( INT ) .)
    MUL             reduce using rule 50 (Matrix -> EYE ( INT ) .)
    SUB             reduce using rule 50 (Matrix -> EYE ( INT ) .)
    ADD             reduce using rule 50 (Matrix -> EYE ( INT ) .)
    LESS            reduce using rule 50 (Matrix -> EYE ( INT ) .)
    GREATER         reduce using rule 50 (Matrix -> EYE ( INT ) .)
    NOT_EQ          reduce using rule 50 (Matrix -> EYE ( INT ) .)
    GREATER_EQ      reduce using rule 50 (Matrix -> EYE ( INT ) .)
    LESS_EQ         reduce using rule 50 (Matrix -> EYE ( INT ) .)
    EQ              reduce using rule 50 (Matrix -> EYE ( INT ) .)
    ;               reduce using rule 50 (Matrix -> EYE ( INT ) .)
    )               reduce using rule 50 (Matrix -> EYE ( INT ) .)


state 134

    (51) Matrix -> ONES ( INT ) .
    MAT_TRANS       reduce using rule 51 (Matrix -> ONES ( INT ) .)
    [               reduce using rule 51 (Matrix -> ONES ( INT ) .)
    DIV_EL          reduce using rule 51 (Matrix -> ONES ( INT ) .)
    MUL_EL          reduce using rule 51 (Matrix -> ONES ( INT ) .)
    SUB_EL          reduce using rule 51 (Matrix -> ONES ( INT ) .)
    ADD_EL          reduce using rule 51 (Matrix -> ONES ( INT ) .)
    DIV             reduce using rule 51 (Matrix -> ONES ( INT ) .)
    MUL             reduce using rule 51 (Matrix -> ONES ( INT ) .)
    SUB             reduce using rule 51 (Matrix -> ONES ( INT ) .)
    ADD             reduce using rule 51 (Matrix -> ONES ( INT ) .)
    LESS            reduce using rule 51 (Matrix -> ONES ( INT ) .)
    GREATER         reduce using rule 51 (Matrix -> ONES ( INT ) .)
    NOT_EQ          reduce using rule 51 (Matrix -> ONES ( INT ) .)
    GREATER_EQ      reduce using rule 51 (Matrix -> ONES ( INT ) .)
    LESS_EQ         reduce using rule 51 (Matrix -> ONES ( INT ) .)
    EQ              reduce using rule 51 (Matrix -> ONES ( INT ) .)
    ;               reduce using rule 51 (Matrix -> ONES ( INT ) .)
    )               reduce using rule 51 (Matrix -> ONES ( INT ) .)


state 135

    (52) Matrix -> ZEROS ( INT ) .
    MAT_TRANS       reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    [               reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    DIV_EL          reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    MUL_EL          reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    SUB_EL          reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    ADD_EL          reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    DIV             reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    MUL             reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    SUB             reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    ADD             reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    LESS            reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    GREATER         reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    NOT_EQ          reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    GREATER_EQ      reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    LESS_EQ         reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    EQ              reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    ;               reduce using rule 52 (Matrix -> ZEROS ( INT ) .)
    )               reduce using rule 52 (Matrix -> ZEROS ( INT ) .)


state 136

    (31) MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .
    ASS_MUL         reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS_DIV         reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS_SUB         reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS_ADD         reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ASS             reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    DIV_EL          reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    MUL_EL          reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    SUB_EL          reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ADD_EL          reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    DIV             reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    MUL             reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    SUB             reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ADD             reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    LESS            reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    GREATER         reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    NOT_EQ          reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    GREATER_EQ      reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    LESS_EQ         reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    EQ              reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    ;               reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)
    )               reduce using rule 31 (MatrixAccess -> [ MatrixAccessRange , MatrixAccessRange ] .)


state 137

    (41) List -> [ ListContent ] .
    ID              reduce using rule 41 (List -> [ ListContent ] .)
    PRINT           reduce using rule 41 (List -> [ ListContent ] .)
    RETURN          reduce using rule 41 (List -> [ ListContent ] .)
    CONTINUE        reduce using rule 41 (List -> [ ListContent ] .)
    BREAK           reduce using rule 41 (List -> [ ListContent ] .)
    FOR             reduce using rule 41 (List -> [ ListContent ] .)
    WHILE           reduce using rule 41 (List -> [ ListContent ] .)
    IF              reduce using rule 41 (List -> [ ListContent ] .)
    {               reduce using rule 41 (List -> [ ListContent ] .)
    SUB             reduce using rule 41 (List -> [ ListContent ] .)
    (               reduce using rule 41 (List -> [ ListContent ] .)
    STRING          reduce using rule 41 (List -> [ ListContent ] .)
    [               reduce using rule 41 (List -> [ ListContent ] .)
    EYE             reduce using rule 41 (List -> [ ListContent ] .)
    ONES            reduce using rule 41 (List -> [ ListContent ] .)
    ZEROS           reduce using rule 41 (List -> [ ListContent ] .)
    FLOAT           reduce using rule 41 (List -> [ ListContent ] .)
    INT             reduce using rule 41 (List -> [ ListContent ] .)
    ,               reduce using rule 41 (List -> [ ListContent ] .)


state 138

    (43) ListContent -> ListEl , . ListContent
    (42) ListContent -> . empty
    (43) ListContent -> . ListEl , ListContent
    (2) empty -> .
    (44) ListEl -> . List
    (45) ListEl -> . Primitive
    (46) ListEl -> . ID
    (41) List -> . [ ListContent ]
    (47) Primitive -> . STRING
    (48) Primitive -> . Number
    (77) Number -> . FLOAT
    (78) Number -> . INT
    ]               reduce using rule 2 (empty -> .)
    ID              shift and go to state 126
    [               shift and go to state 104
    STRING          shift and go to state 66
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    ListEl                         shift and go to state 123
    ListContent                    shift and go to state 143
    empty                          shift and go to state 122
    List                           shift and go to state 124
    Primitive                      shift and go to state 125
    Number                         shift and go to state 67

state 139

    (37) Range -> RangeElement : RangeElement . : RangeElement
    (38) Range -> RangeElement : RangeElement .
    :               shift and go to state 144
    ID              reduce using rule 38 (Range -> RangeElement : RangeElement .)
    PRINT           reduce using rule 38 (Range -> RangeElement : RangeElement .)
    RETURN          reduce using rule 38 (Range -> RangeElement : RangeElement .)
    CONTINUE        reduce using rule 38 (Range -> RangeElement : RangeElement .)
    BREAK           reduce using rule 38 (Range -> RangeElement : RangeElement .)
    FOR             reduce using rule 38 (Range -> RangeElement : RangeElement .)
    WHILE           reduce using rule 38 (Range -> RangeElement : RangeElement .)
    IF              reduce using rule 38 (Range -> RangeElement : RangeElement .)
    {               reduce using rule 38 (Range -> RangeElement : RangeElement .)
    SUB             reduce using rule 38 (Range -> RangeElement : RangeElement .)
    (               reduce using rule 38 (Range -> RangeElement : RangeElement .)
    STRING          reduce using rule 38 (Range -> RangeElement : RangeElement .)
    [               reduce using rule 38 (Range -> RangeElement : RangeElement .)
    EYE             reduce using rule 38 (Range -> RangeElement : RangeElement .)
    ONES            reduce using rule 38 (Range -> RangeElement : RangeElement .)
    ZEROS           reduce using rule 38 (Range -> RangeElement : RangeElement .)
    FLOAT           reduce using rule 38 (Range -> RangeElement : RangeElement .)
    INT             reduce using rule 38 (Range -> RangeElement : RangeElement .)


state 140

    (14) SelectionStatement -> IF ( Expression ) Statement ELSE . Statement
    (5) Statement -> . ExpressionStatement ;
    (6) Statement -> . AssignmentStatement ;
    (7) Statement -> . PrintStatement ;
    (8) Statement -> . JumpStatement ;
    (9) Statement -> . IterationStatement
    (10) Statement -> . SelectionStatement
    (11) Statement -> . CompoundStatement
    (13) ExpressionStatement -> . Expression
    (65) AssignmentStatement -> . ID MatrixAccess AssignmentOperator Expression
    (66) AssignmentStatement -> . ID AssignmentOperator Expression
    (22) PrintStatement -> . PRINT Expression
    (19) JumpStatement -> . RETURN Expression
    (20) JumpStatement -> . CONTINUE
    (21) JumpStatement -> . BREAK
    (16) IterationStatement -> . FOR ID ASS List Statement
    (17) IterationStatement -> . FOR ID ASS Range Statement
    (18) IterationStatement -> . WHILE ( Expression ) Statement
    (14) SelectionStatement -> . IF ( Expression ) Statement ELSE Statement
    (15) SelectionStatement -> . IF ( Expression ) Statement
    (12) CompoundStatement -> . { StatementList }
    (23) Expression -> . ComplexExpression
    (24) Expression -> . PrefixUnaryOperator ( ComplexExpression ) PostfixUnaryOperator
    (25) Expression -> . PrefixUnaryOperator SimpleExpression PostfixUnaryOperator
    (26) ComplexExpression -> . Expression BinaryOperator Expression
    (27) ComplexExpression -> . Expression ComparisonOperator Expression
    (72) PrefixUnaryOperator -> . empty
    (73) PrefixUnaryOperator -> . SUB
    (2) empty -> .
  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20
    {               shift and go to state 21
    SUB             shift and go to state 25
    (               reduce using rule 2 (empty -> .)
    STRING          reduce using rule 2 (empty -> .)
    [               reduce using rule 2 (empty -> .)
    EYE             reduce using rule 2 (empty -> .)
    ONES            reduce using rule 2 (empty -> .)
    ZEROS           reduce using rule 2 (empty -> .)
    FLOAT           reduce using rule 2 (empty -> .)
    INT             reduce using rule 2 (empty -> .)

    Expression                     shift and go to state 12
    Statement                      shift and go to state 145
    ExpressionStatement            shift and go to state 5
    AssignmentStatement            shift and go to state 6
    PrintStatement                 shift and go to state 7
    JumpStatement                  shift and go to state 8
    IterationStatement             shift and go to state 9
    SelectionStatement             shift and go to state 10
    CompoundStatement              shift and go to state 11
    ComplexExpression              shift and go to state 22
    PrefixUnaryOperator            shift and go to state 23
    empty                          shift and go to state 24

state 141

    (54) MatrixRowList -> [ MatrixRow ] , . MatrixRowList
    (53) MatrixRowList -> . empty
    (54) MatrixRowList -> . [ MatrixRow ] , MatrixRowList
    (2) empty -> .
    [               shift and go to state 92
    ]               reduce using rule 2 (empty -> .)

    MatrixRowList                  shift and go to state 146
    empty                          shift and go to state 94

state 142

    (56) MatrixRow -> Number , MatrixRow .
    ]               reduce using rule 56 (MatrixRow -> Number , MatrixRow .)


state 143

    (43) ListContent -> ListEl , ListContent .
    ]               reduce using rule 43 (ListContent -> ListEl , ListContent .)


state 144

    (37) Range -> RangeElement : RangeElement : . RangeElement
    (39) RangeElement -> . ID
    (40) RangeElement -> . Number
    (77) Number -> . FLOAT
    (78) Number -> . INT
    ID              shift and go to state 101
    FLOAT           shift and go to state 73
    INT             shift and go to state 70

    RangeElement                   shift and go to state 147
    Number                         shift and go to state 106

state 145

    (14) SelectionStatement -> IF ( Expression ) Statement ELSE Statement .
    ID              reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    PRINT           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    RETURN          reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    CONTINUE        reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    BREAK           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    FOR             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    WHILE           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    IF              reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    {               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    SUB             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    (               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    STRING          reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    [               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    EYE             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    ONES            reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    ZEROS           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    FLOAT           reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    INT             reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    $end            reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    }               reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)
    ELSE            reduce using rule 14 (SelectionStatement -> IF ( Expression ) Statement ELSE Statement .)


state 146

    (54) MatrixRowList -> [ MatrixRow ] , MatrixRowList .
    ]               reduce using rule 54 (MatrixRowList -> [ MatrixRow ] , MatrixRowList .)


state 147

    (37) Range -> RangeElement : RangeElement : RangeElement .
    ID              reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    PRINT           reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    RETURN          reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    CONTINUE        reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    BREAK           reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    FOR             reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    WHILE           reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    IF              reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    {               reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    SUB             reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    (               reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    STRING          reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    [               reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    EYE             reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    ONES            reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    ZEROS           reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    FLOAT           reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)
    INT             reduce using rule 37 (Range -> RangeElement : RangeElement : RangeElement .)


Conflicts:

shift/reduce conflict for ID in state 2 resolved as shift
shift/reduce conflict for ASS_MUL in state 13 resolved as shift
shift/reduce conflict for ASS_DIV in state 13 resolved as shift
shift/reduce conflict for ASS_SUB in state 13 resolved as shift
shift/reduce conflict for ASS_ADD in state 13 resolved as shift
shift/reduce conflict for ASS in state 13 resolved as shift
shift/reduce conflict for ID in state 60 resolved as shift
shift/reduce conflict for DIV_EL in state 74 resolved as shift
shift/reduce conflict for MUL_EL in state 74 resolved as shift
shift/reduce conflict for SUB_EL in state 74 resolved as shift
shift/reduce conflict for ADD_EL in state 74 resolved as shift
shift/reduce conflict for DIV in state 74 resolved as shift
shift/reduce conflict for MUL in state 74 resolved as shift
shift/reduce conflict for SUB in state 74 resolved as shift
shift/reduce conflict for ADD in state 74 resolved as shift
shift/reduce conflict for LESS in state 74 resolved as shift
shift/reduce conflict for GREATER in state 74 resolved as shift
shift/reduce conflict for NOT_EQ in state 74 resolved as shift
shift/reduce conflict for GREATER_EQ in state 74 resolved as shift
shift/reduce conflict for LESS_EQ in state 74 resolved as shift
shift/reduce conflict for EQ in state 74 resolved as shift
shift/reduce conflict for DIV_EL in state 75 resolved as shift
shift/reduce conflict for MUL_EL in state 75 resolved as shift
shift/reduce conflict for SUB_EL in state 75 resolved as shift
shift/reduce conflict for ADD_EL in state 75 resolved as shift
shift/reduce conflict for DIV in state 75 resolved as shift
shift/reduce conflict for MUL in state 75 resolved as shift
shift/reduce conflict for SUB in state 75 resolved as shift
shift/reduce conflict for ADD in state 75 resolved as shift
shift/reduce conflict for LESS in state 75 resolved as shift
shift/reduce conflict for GREATER in state 75 resolved as shift
shift/reduce conflict for NOT_EQ in state 75 resolved as shift
shift/reduce conflict for GREATER_EQ in state 75 resolved as shift
shift/reduce conflict for LESS_EQ in state 75 resolved as shift
shift/reduce conflict for EQ in state 75 resolved as shift
shift/reduce conflict for ID in state 102 resolved as shift
shift/reduce conflict for ID in state 103 resolved as shift
shift/reduce conflict for ID in state 107 resolved as shift
shift/reduce conflict for ID in state 108 resolved as shift
shift/reduce conflict for ELSE in state 129 resolved as shift
shift/reduce conflict for ID in state 140 resolved as shift
reduce/reduce conflict in state 89 resolved using rule MatrixAccess -> empty
rejected rule (PostfixUnaryOperator -> empty) in state 89
Rule (PostfixUnaryOperator -> empty) is never reduced